/*
 * Copyright 2011 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

module ybuilder.core.build;

import java.lang:System,Thread, ClassLoader;
import java.io.File;

import org.xml.sax: Attributes, Locator, SAXParseException;
 
import org.xml.sax.helpers.AttributesImpl;

import yeti.lang:Struct;

import org.apache.tools.ant.types: Path,AbstractFileSet, FileSet, DirSet;
import org.apache.tools.ant.helper: AntXMLContext, ProjectHelper2,
                                    ProjectHelper2$ElementHandler;
import org.apache.tools.ant.input.DefaultInputHandler;
import org.apache.tools.ant: BuildLogger, DemuxInputStream, NoBannerLogger, 
                             Project, RuntimeConfigurable, Target, Task, 
                             UnknownElement,AntClassLoader;


typedef xmlelement = Text string 
                     | Element {
                            name is string, 
                            attributes is map<string,string>, 
                            subelements is list<xmlelement>
                        };
                                

typedef projectType = {
    antProject is ~Project, 
    executedTargets is hash<string,boolean>, 
    logger is string -> (),
    properties is hash<string,string>,
    var args is list<string>
};
                    
typedef targetType = {
    name is string, 
    pos is number,
    depends is array<targetType>,
    var preDependenciesFn is projectType -> (),
    var description is string,
    var fn is projectType -> (), 
    var postFn is projectType -> ()
};


typedef filePatternType = list?<Include string
                                | Exclude string 
                                | Patterns (() -> filePatternType) >;
                                
typedef pathPatternType = list?<Fileset hash<string, filePatternType>
                                | Dirset hash<string, filePatternType> 
                                | Location string 
                                | Path string 
                                | Patterns ( () -> pathPatternType) >;
    

class AntBuilderLocator extends Locator
    int getColumnNumber() 0,

    int getLineNumber() 0,

    String getPublicId() "",

    String getSystemId() "",
end;

ybuilderVersion = "0.5";

basedir = "./";


createProject () = 
    (antProject = new Project();
     logger = new NoBannerLogger();
     logger#setMessageOutputLevel(Project#MSG_INFO);
     logger#setOutputPrintStream(System#out);
     logger#setErrorPrintStream(System#err);
     antProject#addBuildListener(logger);
     antProject#init();
     antProject#getBaseDir();

     {
        antProject, 
        executedTargets = [:], 
        logger txt = println txt, 
        var args = [], 
        properties = [:]
     } is projectType);		

el name atts subelements = 
    Element {
        name,
        attributes = atts,
        subelements,	
    } is xmlelement;
            
tel name atts text = el name atts [Text text];			

targets is hash<string,targetType> = [:];


var _targetCounter = 0;
    
target name opts fn1 is string -> 'a -> 'b -> targetType = 
   (if name in targets then 
        failWith "\(name) already defined as target" 
    fi;
    
    t = {
        name, 
        depends = array [],
        pos = synchronized _targetCounter 
            \(_targetCounter := _targetCounter +1; _targetCounter),
        var description = "",
        var preDependenciesFn = \(),
        var fn = fn1, 
        var postFn = \()
    } is targetType;
    
    for opts do opt: 
        case opt of
        Depends d : push t.depends d;
        Dependencies ds: for ds (push t.depends);
        Description d : t.description := d;
        DependencyOf target : push (target is targetType).depends t;
        Before target : push (target is targetType).depends t;
        DoPreDependencies fn : t.preDependenciesFn := fn;
        esac 
    done;
    
    targets.[t.name] := t;
    t);

    
targetToString t = (
    deps = list t.depends;
    "---\n\(t.name)"
    ^ "\n"
    ^ if (strLength t.description) > 0 then
        "   \(t.description)\n"
    else
        ""
    fi
    ^ "   depends: \(strJoin ", " (map (.name) deps))");   

cmdTargets = 
    target "targets" 
        [Description "Shows all the available targets in current project"] 
        \(for (sortBy (on (<)(.pos)) (list targets)) 
            (println . targetToString));
    

printSimilarTargets name =
   (n = name;
    ts = filter do t: strStarts? t.name n done (mapHash do k t: t done targets);
    if empty? ts then
        println "There are no targets starting with [\(n)]";
    else
        println "Targets starting with [\(n)]:\n";
        for ts do t:
            println 
                String#format("%1$-15s %2$s\n",
                            array [t.name,t.description])
        done;
    fi);
            
targetsInHelp = array [cmdTargets];             
            
help = 
    target "help" 
        [Description "Shows help"] 
        do p:
        if empty? p.args then
            println "\nybuilder version: \(ybuilderVersion) \n";
            println '
ybuilder is a simple build-enviroment for YETI the functional 
programming-language for the JVM.
----

To run ybuilder targets defined in project.yeti:

java -jar ybuilder.jar target [params] [-property] [, target [param] [-property] ]+

target       name of the target to run
params       space seperated list of params for target
property     space seperated list of -key=value pairs starting with - for target

-or-

To run yeti-expression in ybuilder enviroment:

java -jar ybuilder.jar #yeti-expression

---
Common targets:

-c              Starts ybuilder in repl mode

-yeti           Same as invoking the yeti.jar in your project but with the full 
                classpath setup  

help            Prints this message
';  
            for targetsInHelp do t:
                println String#format("%1$-15s %2$s\n",array [t.name,t.description])
            done;
println 'retrieveBuildLibs downloads the build libs into ybuilder/libext_managed dir                

cleanBuildLibs  deletes the ybuilder/libext_managed directory 
                triggering fresh load next time
';

        else
            for p.args printSimilarTargets;
        fi;
        done;
    
executeTarget target opts project is targetType -> 'a -> 'b -> 'c= 
   (var runAlways = false;
    var targetArgs = [];
    for opts do opt: 
                case opt of
                RunAlways v : runAlways := v;
                Exclude target: project.executedTargets.[target.name] := true;
                ExcludeByName name: project.executedTargets.[name] := true;
                Args args: targetArgs := args;
                Properties h: insertHash project.properties h;
                esac 
             done;
    if runAlways 
       or (not (target is targetType).name in project.executedTargets) then
        project.executedTargets.[target.name] := true;
        oldArgs = project.args;
        project.args := targetArgs;

        target.preDependenciesFn project;
        
        for target.depends do t:
            executeTarget t [] project;
        done;
        try
            //println "Exectuing target \(target.name)";
            target.fn project; target.postFn project;
        finally
            project.args := oldArgs;
        yrt
    fi);

class YbuilderAntException(String message, Exception ca) extends RuntimeException(message,ca) 
end;
    
        
runTarget target opts =
    executeTarget  target opts (createProject ());

antfact antElementHandler antXmlContext elem =
    case (elem is xmlelement) of
    Element {name, attributes, subelements}: 
       ({sname,ns} = 
           (inn = strTrim name;
            cut = strIndexOf inn " " 0;
            if cut == (-1) then {sname = inn, ns = ""}
            else
                {sname = strTrim (strRight inn cut),
                ns = strTrim (strLeft inn cut)}
            fi);
                        
        saxAtts = new AttributesImpl();
        forHash attributes do key value:
            saxAtts#addAttribute((), key, key, "CDATA", value) 
        done;

        (antElementHandler is ~ProjectHelper2$ElementHandler)
            #onStartElement(ns, sname, sname,
                            saxAtts, (antXmlContext is ~AntXMLContext));

        for subelements do ele: _ = 
                            antfact antElementHandler antXmlContext ele 
                        done;
        
        wrapper = (antXmlContext#getWrapperStack()#lastElement()) 
                unsafely_as ~RuntimeConfigurable;

        antElementHandler#onEndElement((),(),antXmlContext);
        wrapper#getProxy();
    );

    Text str : 
        (antElementHandler#characters(
                    ((str is string) unsafely_as ~String)#toCharArray(), 
                    0, strLength str, antXmlContext);
         () unsafely_as ~Object);
    esac;

_antProjectElementHandler = new ProjectHelper2$ElementHandler();


antTaskWithElement elem ybtProject = 
    try 
        project is ~Project = ybtProject.antProject;
        collectorTarget = new Target();
        antXmlContext = new AntXMLContext(project is ~Project);
        collectorTarget#setProject(project);
        antXmlContext#setCurrentTarget(collectorTarget);
        antXmlContext#setLocator(new AntBuilderLocator());

        //execute
        node = antfact _antProjectElementHandler antXmlContext elem;
        if nullptr? node then
            ()
        elif node instanceof Task then
            task = if node instanceof UnknownElement then
                        ue = node unsafely_as ~UnknownElement;
                        ue#maybeConfigure();
                        ue#getRealThing();
                   else
                        node 
                   fi;
            if task instanceof Task then
                originalIn = System#in;
                projectDefaultStream = project#getDefaultInputStream();
                project#setDefaultInputStream(originalIn);
                System#setIn(new DemuxInputStream(project));

                    (task unsafely_as ~Task)#perform();
                
                System#setIn(originalIn);
                project#setDefaultInputStream(projectDefaultStream);
            fi
        else
            (node unsafely_as ~RuntimeConfigurable)#maybeConfigure(project);
        fi;
        node
    catch Exception ex: 
        throw new YbuilderAntException(ex#getMessage(),ex);
    yrt;
    

antTask name atts subelements project = 
    (_ = antTaskWithElement (el name atts subelements) project;
     ());

antPatterns patts = 
    concatMap do pat: 
            case pat of
            Include name: [el "include" ["name":name][]];
            Exclude name: [el "exclude" ["name":name][]];
            Patterns pa: antPatterns (pa ());
            esac 
        done patts; 

antFileset dir patts =  
    el "fileset" ["dir" : dir] (antPatterns patts);
antDirset dir patts =  
    el "dirset" ["dir" : dir] (antPatterns patts);

antPathElements patts = 
   (filesets = array [];
    dirsets = array [];
    root = array[];
    withPatts pattsI =
        for (pattsI is pathPatternType) do pat:
                case pat of
                Fileset h: 
                    forHash h do k v: 
                        push filesets (antFileset k v) 
                    done;
                Dirset h: 
                    forHash h do k v:
                        push dirsets (antDirset k v)
                    done;
                Path str : push root (el "pathelement" ["path" : "${\(str)}"] []);
                Location str: push root (el "pathelement" ["location" : str] []);
                Patterns pa: withPatts ( pa ());
                esac; 
            done;
    withPatts patts;
    list (root ++ filesets ++ dirsets)); 
    

_createAntPath project patts	= 
   (name="foox";
    antTask "path" ["id" : name] (antPathElements patts) project;
    (project.antProject#getReference(name)) unsafely_as ~Path);

createAntPath patts = _createAntPath (createProject ()) patts;
    
createAntClassLoader patts opts =
   (var parentClassLoader = ClassLoader#getSystemClassLoader()#getParent();
    var parentFirst = true;
    for opts do opt:
        case opt of
        ParentFirst bo : parentFirst := bo;
        Parent cl : parentClassLoader := cl;
        esac
    done;
    proj = createProject ();
    path = _createAntPath proj patts;
    new AntClassLoader(parentClassLoader, proj.antProject,path,parentFirst));
    
    
createAntFileSet dir patts	= 
   (name="foox";
    project = createProject();
    antTask "fileset" ["dir":dir, "id" : name] (antPatterns patts) project;
    ((project.antProject#getReference(name)) unsafely_as ~FileSet));

createAntDirSet dir patts	= 
   (name="foox";
    project = createProject();
    antTask "dirset" ["dir":dir, "id" : name] (antPatterns patts) project;
    ((project.antProject#getReference(name)) unsafely_as ~DirSet));
    
    
getAntPathFromProject name project = 
   (var ref = (project is projectType).antProject#getReference(name is string);
    if not defined? ref then 
        () unsafely_as ~Path;
    elif not ref instanceof Path then 
        failWith "Under name [\(name)] is no path-ref but a [\(ref)]";
    else 
        ref unsafely_as ~Path 
    fi;);
    
getAntAbstractFileSetFromProject name project = 
   (var ref = (project is projectType).antProject#getReference(name is string);
    if not defined? ref then 
        () unsafely_as ~AbstractFileSet;
    elif not ref instanceof AbstractFileSet then 
        failWith "Under name [\(name)] is no path-ref but a [\(ref)]";
    else 
        ref unsafely_as ~AbstractFileSet 
    fi);
    
antPathById name project =
        strJoin ";" (wrapArray (getAntPathFromProject name project)#list());

    
file name = new File(name is string);
assert text cond = if not cond then failWith text else () fi;

cmdYbuilderVersion = 
    target "-ybuilderVersion" 
        [Description "The verstion of ybuilder: \(ybuilderVersion)"] 
        (antTask "echo" ["message":"ybuilder version \(ybuilderVersion) yeti-version: \(yetiRuntimeVersion)"] []);

        
    
{
    assert,
    ybuilderVersion,
    cmdYbuilderVersion,
    basedir,

    createAntPath, 
    createAntClassLoader,
    createAntFileSet, createAntDirSet, getAntPathFromProject, 
    getAntAbstractFileSetFromProject,
    targetToString,

    printSimilarTargets,
    
    cmdTargets,
    targetsInHelp,
    help,
    targets,
    target,
    runTarget,
    executeTarget,
    createProject,
    el,
    tel,
    antTaskWithElement,
    antTask,
    antPatterns,
    antFileset,
    antDirset,
    antPathElements,
    antPathById,
    file,
}


