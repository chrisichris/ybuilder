module ybuilder.core.base;

load ybuilder.core.build;

artifactDependencies = array[];					  
maven str = ("antlib:org.apache.maven.artifact.ant " ^ str);
localRepository = { var layout = "default", var path = "${user.home}/.m2/repository"}; 	
remoteRepositories = array [];

libManagedDirP = path basedir "lib_managed";
libDirP = path basedir "lib";	
targetDirP = path basedir "target";
srcDirP = path basedir "src";
mainDirP = path srcDirP "main";
testDirP = path srcDirP "test";
reportsDirP = path targetDirP "reports";
docDirP = path targetDirP "doc";
ybuilderDirP = path basedir "ybuilder";
buildExtlibDir = "ybuilder/extlib";



dependency groupId artifactId version opts = (
	v = {groupId is string,
		artifactId is string,
		var version = version is string,
		var type = "jar", 
		var classifier = undef_str,
		var scope = "compile",
		var systemPath = undef_str,
		exclusions = array []};
	for opts do opt: case opt of
		Type t: v.type := t;
		Classifier b: v.classifier := b;
		TestScope (): v.scope := "test";
		CompileScope (): v.scope := "compile";
		ProvidedScope (): v.scope := "provided";
		SystemScope (): v.scope := "system";
		RuntimeScope (): v.scope := "runtime";
		
		SystemPath b: v.systemPath := b; 
		Exclusion {groupId, artifactId} : push v.exclusions {groupId is string, artifactId is string}; 
		esac;done;
	push artifactDependencies v;
	());

remoteRepository idstr url = push remoteRepositories {id = idstr is string, url is string, var layout = "default"};
exclusion groupId artifactId = Exclusion {groupId is string, artifactId is string};


//lifecycle targets
preClean = target "preClean" [Livecycle true, Description "invoked befroe main clean"] \();
clean = target "clean" [Depends preClean, Livecycle true, Description "cleans the build artifacts"] 
	(antTask "delete" ["dir" : targetDirP~] []);

cleanLibs = target "cleanLibs" [Description "Cleans the retrieved dependencies in [\(libManagedDirP~)] directory"] 
				(antTask "delete" ["dir":libManagedDirP~] []);
cleanAll = target "cleanAll" [Livecycle true,Dependencies[cleanLibs, clean], Description "Cleans the project and all the libs"] \();

validate = target "validate" [Livecycle true] \();
initializeBuild = target "initializeBuild" [Depends validate, Livecycle true] \();
initialize = target "initialize" [Depends initializeBuild, Livecycle true] (antTask "mkdir" ["dir": targetDirP~] []);
generateResources = target "generateResources" [Depends initialize, Livecycle true] \();
processResources = target "processResources" [Depends generateResources, Livecycle true] \();
compile = target "compile" [Depends processResources, Livecycle true] \();
processClasses = target "processClasses" [Depends compile, Livecycle true] \();
generateTestResources = target "generateTestResources" [Depends processClasses, Livecycle true] \();
processTestResources = target "processTestResources" [Depends generateTestResources, Livecycle true] \();
testCompile = target "testCompile" [Depends processTestResources, Livecycle true] \();
processTestClasses = target "processTestClasses" [Depends testCompile, Livecycle true] \();
test = target "test" [Depends processTestClasses, Livecycle true] \();
preparePackage = target "preparePackage" [Depends test, Livecycle true] \();
package = target "package" [Depends preparePackage, Livecycle true] \();
preIntegrationTest = target "preIntegrationTest" [Depends package, Livecycle true] \();
integrationTest = target "integrationTest" [Depends preIntegrationTest, Livecycle true] \();

build = target "build" [Dependencies [cleanAll,integrationTest]] \();

preDoc = target "preDoc" [Livecycle true] \();
doc = target "doc" [Depends preDoc, Livecycle true] \();	

buildExtPath is pathPatternType = array [FileInclude (buildExtlibDir ^ "/*.jar"), FileInclude "ybuilder/extlib_managed/*.jar"];
runtimePath is pathPatternType = array [FileInclude (libManagedDirP||"/compile/**/*.jar"),FileInclude (libManagedDirP||"/runtime/**/*.jar"),FileInclude (libDirP||"/**/*.jar")];
compilePath is pathPatternType = array [FileInclude (libManagedDirP||"/system/**/*.jar"),FileInclude (libManagedDirP||"/provided/**/*.jar"), Patterns \runtimePath];
testPath is pathPatternType = array [FileInclude (libManagedDirP||"/test/**/*.jar"), Patterns \compilePath];
testRuntimePath is pathPatternType = array [Patterns \testPath];


retrieveLibs = target "retrieveLibs" [InLivecycle initialize, Description "loads librararies in [\(libManagedDirP~)]"] do project:
		copyDeps scope project = 
			if not empty? artifactDependencies then
				antTask (maven "dependencies") ["filesetId" : "dependenciesFS-"^scope, "scopes":scope] (
						[el (maven "localRepository") ["layout":localRepository.layout, "path":localRepository.path] []] ++
						(map do rr: el (maven "remoteRepository") ["id":rr.id, "url":rr.url,"layout":rr.layout] [] done remoteRepositories) ++
						(map do dep: el (maven "dependency") ["groupId" : dep.groupId,
															"artifactId" : dep.artifactId,
															"version" : dep.version,
															"type" : dep.type,
															"classifier" : dep.classifier,
															"scope" : dep.scope,
															"systemPath": dep.systemPath]
												(map do exc: el (maven "exclusion") ["groupId":exc.groupId, "artifactId":exc.artifactId] [] done dep.exclusions) 
							done artifactDependencies)) project;
							
				antTask "copy" ["todir":libManagedDirP||scope] [
						el "fileset" ["refid":"dependenciesFS-" ^ scope][],
						el "mapper" ["type":"flatten"] []] project;
			fi;

		if not (file (libManagedDirP~))#exists() then
			copyDeps "test" project;
			copyDeps "compile" project;
			copyDeps "system" project;
			copyDeps "provided" project;
			copyDeps "runtime" project;
		fi;
	done;
	
initPathes = target "initPathes" [InLivecycle initialize,Depends retrieveLibs] do project:
		antTask "path" ["id":"runtimePath"](antPathElements runtimePath) project;
		antTask "path" ["id":"compilePath"](antPathElements compilePath) project;
		antTask "path" ["id":"testPath"](antPathElements testPath) project;
		antTask "path" ["id":"testRuntimePath"](antPathElements testRuntimePath) project;
	done;
	
initBuildPathes = target "initBuildPathes" [InLivecycle initializeBuild,Depends retrieveLibs] do project:
		antTask "path" ["id":"buildExtPath"](antPathElements buildExtPath) project;
	done;

{
var projectVersion = "", 
var projectArtifactId = "", 
var projectGroupId = "",
var projectDescription = "",
var projectVendor = "",
var projectHomePage = "",

libManagedDirP,
libDirP,
targetDirP,
srcDirP,
mainDirP,
testDirP,
reportsDirP,
docDirP,
ybuilderDirP,
buildExtlibDir,

buildExtPath, initBuildPathes,
artifactDependencies, maven, localRepository, remoteRepositories, 
dependency, exclusion,remoteRepository, retrieveLibs, cleanLibs, preClean, clean, cleanAll, validate, initializeBuild, initialize, generateResources, processResources,
compile, processClasses, generateTestResources, processTestResources, testCompile, processTestClasses, test, preparePackage,
package, preIntegrationTest, integrationTest, build, preDoc, doc, runtimePath, compilePath, testPath, testRuntimePath, initPathes
}	


