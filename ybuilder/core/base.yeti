module ybuilder.core.base;

import java.io.File;
import org.apache.tools.ant.types: FileSet;


load ybuilder.core.build;

maven str = ("antlib:org.apache.maven.artifact.ant " ^ str);
localRepository = { 
    var layout = "default", 
    var path = "${user.home}/.m2/repository"
};


//general settings
project = {
    var version = "", 
    var artifactId = "", 
    var groupId = "",
    var description = "",
    var vendor = "",
    var homePage = "",
};
 	

//directories
    libManagedDir = path basedir "/lib_managed";
    libDir = path basedir "/lib";	
    targetDir = path basedir "/target";
    srcDir = path basedir "/src";
    mainDir = path srcDir "/main";
    testDir = path srcDir "/test";
    reportsDir = path targetDir "/reports";
    docDir = path targetDir "/doc";
    ybuilderDir = path basedir "/ybuilder";
    targetClassesDir = path targetDir "/classes";
    targetTestClassesDir = path targetDir "/testclasses";
    webappDir = path mainDir "/webapp";

    javaDir = path mainDir "/java";
    javaTestDir = path testDir "/java";
    resourcesDir = path mainDir "/resources";
    resourcesTestDir = path testDir "/resources";
    javadocDir = path docDir "/javadoc";

    yetiDir = path mainDir "/yeti";
    yetiTestDir = path testDir "/yeti";
    yetidocDir = path docDir "/yetidoc";

    buildExtlibDir = "ybuilder/extlib";
    
    dir = {
        libManaged = libManagedDir,
        lib = libDir,	
        target = targetDir,
        src = srcDir,
        main = mainDir,
        test = testDir,
        reports = reportsDir,
        doc = docDir,
        ybuilder = ybuilderDir,
        targetClasses = targetClassesDir,
        targetTestClasses = targetTestClassesDir,
        webapp = webappDir,

        java = javaDir,
        javaTest = javaTestDir,
        resources = resourcesDir,
        resourcesTest = resourcesTestDir,
        javadoc = javadocDir,

        yeti = yetiDir,
        yetiTest = yetiTestDir,
        yetidoc = yetidocDir,
        
        buildExtlib = buildExtlibDir,
    };

//pathes
buildExtPath is pathPatternType = 
    array [Fileset [buildExtlibDir : [Include "**/*.jar"]], 
           Fileset ["ybuilder/extlib_managed/": [Include "*.jar"]]];
           
runtimePath is pathPatternType = 
    array [Fileset [ libManagedDir~ : [Include "/compile/**/*.jar",
                                       Include "/runtime/**/*.jar"]],
           Fileset [ libDir~ : [Include "**/*.jar"]],
           Location (targetClassesDir~)];
           
compilePath is pathPatternType = 
    array [Fileset [ libManagedDir~ : [Include "/system/**/*.jar",
                                       Include "/provided/**/*.jar"]], 
           Patterns \runtimePath];
testPath is pathPatternType = 
    array [Fileset [libManagedDir || "/test" : [Include "**.*.jar"]], 
           Patterns \compilePath,
           Location (targetTestClassesDir~)];
           
testRuntimePath is pathPatternType = array [Patterns \testPath];


//task attributes
javacAttributes = 
    ["srcdir" : javaDir~, "destdir":targetClassesDir~, 
     "classpathref":"compilePath", "debug": "on", 
     "debuglevel" : "lines, vars, source", "includeAntRuntime":"false"];
     
var javacCompilerarg = "";

javacTestAttributes = 
    ["srcdir" : javaTestDir~, "destdir":targetTestClassesDir~, "classpathref":"testPath", 
     "debug": "on", "debuglevel" : "lines, vars, source", "includeAntRuntime":"false"];

var javacTestCompilerarg = "";

javadocAttributes = 
    ["sourcepath" : javaDir~, 
     "destdir":javadocDir~, "classpathref":"compilePath"];

yeticAttributes = ["srcdir":yetiDir~, "destdir": targetClassesDir~];
yeticTestAttributes = ["srcdir":yetiTestDir~, 
                       "destdir" : targetTestClassesDir~];

jarManifest = [:] is hash<string,string>;
jarDestfile = joinPath targetDir (prop \"/\(project.groupId)-\(project.version).jar");
jarAttributes = [:]; 
jarFileset = [ targetClassesDir~ : []];

warDestfile = joinPath targetDir (prop \"/\(project.groupId).war");
warAttributes = [:];

warLibset = 
     [libDir~ : [Include "**/*.jar"],
      libManagedDir~ : [Include "compile/**/*.jar",
                        Include "runtime/**/*.jar"]];
                       
warClassesset =
    [targetClassesDir~ : [Include "**/*.*"]];

warFileset = [webappDir~ : [Include "**/*.*"]];

webxmlFile = path webappDir "/WEB-INF/web.xml";
                       

//dependency management
artifactDependencies = array[];					  
remoteRepositories = array [];

dependency groupId artifactId version opts = 
   (v = {
        groupId is string,
        artifactId is string,
        var version = version is string,
        var type = "jar", 
        var classifier = undef_str,
        var scope = "compile",
        var systemPath = undef_str,
        exclusions = array []
    };
    for opts do opt: 
        case opt of
        Type t: v.type := t;
        Classifier b: v.classifier := b;
        TestScope (): v.scope := "test";
        CompileScope (): v.scope := "compile";
        ProvidedScope (): v.scope := "provided";
        SystemScope (): v.scope := "system";
        RuntimeScope (): v.scope := "runtime";
        
        SystemPath b: v.systemPath := b; 
        Exclusion {groupId, artifactId} : push v.exclusions {groupId is string, artifactId is string}; 
        esac;
    done;
    
    push artifactDependencies v;
    ());

remoteRepository idstr url = 
    push remoteRepositories {
            id = idstr is string, 
            url is string, 
            var layout = "default"
        };
        
exclusion groupId artifactId = 
    Exclusion {groupId is string, artifactId is string};

//helper functions
createNewYetiProject projectDir project = 
       (for [libDir, javaDir,yetiDir,resourcesDir,javaTestDir,yetiTestDir,
             resourcesTestDir, path basedir buildExtlibDir] 
            do d: 
                antTask "mkdir" ["dir":(joinPath projectDir d)~] [] project 
            done;
        antTask "copy" 
                ["todir":(joinPath projectDir ybuilderDir)~, 
                 "overwrite":"false"] 
                [el "javaresource" 
                    ["name":"ybuilder/core/buildDependencies.yeti"][],
                 el "mapper" ["type":"flatten"] []] 
                project;
                
        antTask "copy" ["todir":projectDir~, "overwrite":"false"] 
                [el "javaresource" ["name":"ybuilder/core/project.yeti"] [],
                 el "mapper" ["type":"flatten"] []] 
                project;
    );
    
yetiMainTask args project = 
    antTask "java" ["classname":"yeti.lang.compiler.yeti", 
                    "classpathref":"testPath", "fork":"true"] 
            (map do a: el "arg" ["value":a] [] done args) 
            project;
    
yetidocTask targetDir fileSet project=     
   (fs = map (strReplace File#pathSeparator "/" . string) 
             (array (fileSet is ~FileSet)#getDirectoryScanner()
                    #getIncludedFiles());
    args = ["-doc", targetDir] ++ fs;
    yetiMainTask args project);


//lifecycle targets
preClean = 
    target "preClean" 
           [Livecycle true, Description "invoked befroe main clean"] 
           \();
           
clean = 
    target "clean" 
           [Depends preClean, Livecycle true, 
                Description "cleans the build artifacts"] 
           (antTask "delete" ["dir" : targetDir~] []);

cleanLibs = 
    target "cleanLibs" 
           [Description "Cleans the retrieved dependencies in [\(libManagedDir~)] directory"] 
           (antTask "delete" ["dir":libManagedDir~] []);
           
cleanAll = 
    target "cleanAll" 
           [Livecycle true,Dependencies[cleanLibs, clean], 
                    Description "Cleans the project and all the libs"] 
           \();

validate = target "validate" [Livecycle true] \();

initializeBuild = 
    target "initializeBuild" [Depends validate, Livecycle true] \();
    
initialize = 
    target "initialize" [Depends initializeBuild, Livecycle true] (antTask "mkdir" ["dir": targetDir~] []);

generateResources = 
    target "generateResources" [Depends initialize, Livecycle true] \();
processResources = 
    target "processResources" [Depends generateResources, Livecycle true] \();
compile = 
    target "compile" [Depends processResources, Livecycle true] \();
processClasses = 
    target "processClasses" [Depends compile, Livecycle true] \();
generateTestResources = 
    target "generateTestResources" [Depends processClasses, Livecycle true] \();
processTestResources = 
    target "processTestResources" 
        [Depends generateTestResources, Livecycle true] \();
testCompile = 
    target "testCompile" [Depends processTestResources, Livecycle true] \();
processTestClasses = 
    target "processTestClasses" [Depends testCompile, Livecycle true] \();
test = 
    target "test" [Depends processTestClasses, Livecycle true] \();
preparePackage = 
    target "preparePackage" [Depends test, Livecycle true] \();
package = 
    target "package" [Depends preparePackage, Livecycle true] \();
preIntegrationTest = 
    target "preIntegrationTest" [Depends package, Livecycle true] \();
integrationTest = 
    target "integrationTest" [Depends preIntegrationTest, Livecycle true] \();

build = target "build" [Dependencies [cleanAll,integrationTest]] \();

preDoc = target "preDoc" [Livecycle true] \();
doc = target "doc" [Depends preDoc, Livecycle true] \();	


//retrieve target
retrieveLibs = 
    target "retrieveLibs" 
        [InLivecycle initialize, Description "loads librararies in [\(libManagedDir~)]"] 
        do project:
            copyDeps scope project = 
                if not empty? artifactDependencies then
                    antTask (maven "dependencies") 
                            ["filesetId" : "dependenciesFS-"^scope, 
                             "scopes":scope] 
                            ([el (maven "localRepository") 
                                ["layout":localRepository.layout, 
                                    "path":localRepository.path] []] 
                            
                             ++ (map do rr: 
                                    el (maven "remoteRepository") 
                                       ["id":rr.id, "url":rr.url,
                                        "layout":rr.layout] 
                                       [] 
                                   done remoteRepositories) 
                             ++ (map do dep: 
                                    el (maven "dependency") 
                                       ["groupId" : dep.groupId,
                                        "artifactId" : dep.artifactId,
                                        "version" : dep.version,
                                        "type" : dep.type,
                                        "classifier" : dep.classifier,
                                        "scope" : dep.scope,
                                        "systemPath": dep.systemPath]
                                        (map do exc: 
                                             el (maven "exclusion") 
                                                ["groupId":exc.groupId, 
                                                 "artifactId":exc.artifactId] [] 
                                             done dep.exclusions) 
                                    done artifactDependencies)) 
                            project;
                            
                antTask "copy" ["todir":libManagedDir|| "/\(scope)"] [
                        el "fileset" ["refid":"dependenciesFS-" ^ scope][],
                        el "mapper" ["type":"flatten"] []] project;
            fi;

        if not (file (libManagedDir~))#exists() then
            copyDeps "test" project;
            copyDeps "compile" project;
            copyDeps "system" project;
            copyDeps "provided" project;
            copyDeps "runtime" project;
        fi;
    done;

//path targets    
initPathes = 
    target "initPathes" [InLivecycle initialize,Depends retrieveLibs] 
            do project:
                antTask "path" ["id":"runtimePath"](antPathElements runtimePath) project;
                antTask "path" ["id":"compilePath"](antPathElements compilePath) project;
                antTask "path" ["id":"testPath"](antPathElements testPath) project;
                antTask "path" ["id":"testRuntimePath"](antPathElements testRuntimePath) project;
            done;
    
initBuildPathes = 
    target "initBuildPathes" [InLivecycle initializeBuild,Depends retrieveLibs] 
          (antTask "path" ["id":"buildExtPath"] (antPathElements buildExtPath));

//java targets
copyResources = 
    target "copyResources" 
           [InLivecycle processResources,
            Description "Copies resources from \(resourcesDir~) to \(targetClassesDir~)"]
           (antTask "copy" ["todir":targetClassesDir~] 
                    [el "fileset" ["dir":resourcesDir~] []]);

copyTestResources = 
    target "copyTestResources" 
           [InLivecycle processTestResources, 
            Description "Copies test resources to test classes dir"]
           (antTask "copy" ["todir":targetTestClassesDir~] 
                    [el "fileset" ["dir":resourcesTestDir~] []]);

compileJava = 
    target "compileJava" 
           [InLivecycle compile, Description "Compiles java sources"]
           (antTask "javac" javacAttributes 
                [el "compilerarg" ["line":javacCompilerarg] []]);

testCompileJava = 
    target "testCompileJava" 
           [InLivecycle testCompile, Description "compiles java test sources"]
           (antTask "javac" javacTestAttributes 
                    [el "compilerarg" ["line":javacTestCompilerarg] []]);

javadoc = 
    target "javadoc" 
           [InLivecycle doc, 
            Description "create javadocs from [\(javaDir~)] to [\(javadocDir~)]"] 
            do p:
                antTask "delete" ["dir":javadocDir~] [] p;
                antTask "javadoc" javadocAttributes [] p;
            done;

junitTest = 
    target "junitTest" [InLivecycle test] 
          (antTask "junit" ["printsummary": "yes", "haltonfailure":"yes"] 
                   [el "classpath" [:] 
                       [el "pathelement" ["path":"testPath"] []],
                    el "formatter" ["type":"plain"] [],
                    el "batchtest" ["fork":"yes", 
                                    "todir":(reportsDir || "/tests")] 
                       [el "fileset" ["dir":javaTestDir~] 
                           [el "include" ["name":"**/*Test.java"] []]]]);

          
//yeti targets
defineYetic = 
    target "defineYetic" 
           [Depends initPathes, InLivecycle initialize]
           (antTask "taskdef" 
                    ["name":"yetic", 
                     "classname":"yeti.lang.compiler.YetiTask", 
                     "classpathref":"compilePath"] 
                    []);	

compileYeti = 
    target "compileYeti" [Depends compileJava, InLivecycle compile] 
            (antTask "yetic" yeticAttributes 
                [el "classpath" [:] 
                    [el "pathelement" ["path":"compilePath"] []]]);
             
testCompileYeti = 
    target "testCompileYeti" 
           [Depends testCompileJava, InLivecycle testCompile] 
           (antTask "yetic" yeticTestAttributes 
                    [el "classpath" [:] 
                        [el "pathelement" ["path":"testPath"] []]]);
                        
yetidoc = 
    target "yetidoc" 
        [InLivecycle doc, Depends initPathes, Description "creates yetidoc"] 
        do p:
            antTask "delete" ["dir":yetidocDir~] [] p;
            antTask "mkdir" ["dir":yetidocDir~] [] p;
            fileSet = 
                createAntFileSet (yetiDir~) [Include "**/*.yeti", 
                                  Exclude "**/ybuilder.yeti" ];
            yetidocTask (yetidocDir~) fileSet p;
        done;

jar = 
    target "jar" 
           [Depends preparePackage, 
            Description "Makes a jar file in dir.target"] 
           (antTask "jar" 
                    (atts = copy jarAttributes;
                     atts.["destfile"] := (jarDestfile~);
                     atts)
                    (mapHash do dir ie:
                        antFileset dir ie;
                     done jarFileset
                     ++ [el "manifest" [:] 
                           (mapHash do k v: 
                             el "attribute" ["name":k, "value":v] [] 
                           done jarManifest)] ));

war = 
    target "war" 
           [Depends preparePackage, 
            Description "Makes a war file in dir.target"]
           (antTask "war" 
                    (atts = (copy warAttributes);
                     atts.["destfile"] := (warDestfile~);
                     atts.["webxml"]:= (webxmlFile~);
                     atts)
                    ((mapHash do dir ie:
                            el "lib" [dir:"."] (antPatterns ie);
                      done warLibset)
                     ++ (mapHash do dir ie:
                            el "classes" [dir:"."] (antPatterns ie);
                      done warClassesset)
                     ++ (mapHash do dir ie:
                            antFileset dir ie;
                      done warFileset)));
        
        
livecycleTargets = {
    preClean, 
    clean, 
    cleanAll, 
    validate, 
    initializeBuild, 
    initialize, 
    generateResources, 
    processResources,
    compile, 
    processClasses, 
    generateTestResources, 
    processTestResources, 
    testCompile, 
    processTestClasses, 
    test, 
    preparePackage,
    package, 
    preIntegrationTest, 
    integrationTest, 
    build, 
    preDoc, 
    doc,  
};	
{
    project,
    
    dir,
    
    pathes = {
        builExt = buildExtPath,
        runtime = runtimePath,
        compile = compilePath,
        test = testPath,
        testRuntime = testRuntimePath,
    },

    taskProps = {
        javacAttributes,
        javacCompilerarg,
        javacTestAttributes,
        javacTestCompilerarg,
        yeticAttributes, 
        yeticTestAttributes,
        jarManifest,
        jarAttributes,
        jarDestfile,
        jarFileset,
        warAttributes,
        warDestfile,
        warLibset,
        warClassesset,
        warFileset,
        webxmlFile
    },

    artifactDependencies, 
    localRepository, 
    remoteRepositories, 
    dependency, 
    exclusion,
    remoteRepository,

    yetiMainTask,
    yetidocTask,
    createNewYetiProject,

    livecycleTargets,
    
    baseTargets = livecycleTargets with {
        copyResources,
        copyTestResources,
        compileJava,
        testCompileJava,
        javadoc,
        junitTest,

        defineYetic,
        compileYeti,
        testCompileYeti,
        yetidoc,
        initBuildPathes,
        retrieveLibs, 
        cleanLibs, 
        initPathes,
        war,
        jar,
    }
}

