/*
 * Copyright 2011 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

module ybuilder.core.base;

import java.lang.Thread;
import java.io.File;
import org.apache.tools.ant.types: FileSet;



load ybuilder.core.build;
load ybuilder.core.projectbase;

createBaseConfig config dependencies = 
    (bc = createProjectBaseConfig config dependencies;
    bc with {
    //task attributes
    javacAttributes = 
        ["srcdir" : config.dir.src, 
         "destdir":config.dir.targetClasses,
         "includes":"**/*.java",
         "debug": "on", 
         "includeAntRuntime":"false",
         "fork": "true"],
         
    var javacCompilerarg = "",

    yeticIncludes = array [Include "**/*.yeti"],
    var yeticSourceReaderCode = none is Some string | None (),

    javacTestAttributes = 
        ["srcdir" : config.dir.test, 
         "destdir": config.dir.targetTestClasses,
         "includes": "**/*.java",
         "debug": "on", 
         "includeAntRuntime": "false",
         "fork": "true"],

    var javacTestCompilerarg = "",

    javadocAttributes = 
        ["sourcepath" : config.dir.src,
         "destdir": config.dir.javadoc],

    runConfig = {
        var mainModule = "main",
        var args = [] is list<string>,
        var yetiSrcDirs = [config.dir.src,config.dir.test],
        var pathfn = pathes.test, 
    },

    //java targets
    resourcesPatterns = 
        array [Include "**/*.*", Exclude "**/*.java", Exclude "**/*.yeti"],
    });


registerBaseTargets config = ( 
    projectBaseT = registerProjectBaseTargets config;
    
    {livecycleTargets, projectBaseTargets} = projectBaseT;

    copyResources = 
        target config "resources" "copy" 
               [Before livecycleTargets.processResources,
                Description ("Copies resources from [\(config.dir.src)," 
                ^"\(config.dir.resources)] to [\(config.dir.targetClasses)]")]
               do p:
                    if (file config.dir.resources)#exists() then
                        antTask "copy" ["todir":config.dir.targetClasses] 
                            [el "fileset" ["dir":config.dir.resources] []]
                            p
                    fi;
                    if (file config.dir.src)#exists() then
                        antTask "copy" ["todir":config.dir.targetClasses]
                            [antFilesetElement 
                                    config.dir.src 
                                    config.resourcesPatterns]
                            p
                    fi;
               done;
               
    copyTestResources = 
        target config "resources" "test-copy" 
               [Before livecycleTargets.processTestResources, 
                Description "Copies test resources to test classes dir"]
               do p:
                    if (file config.dir.resourcesTest)#exists() then
                        antTask "copy" ["todir":config.dir.targetTestClasses] 
                                [el "fileset" 
                                    ["dir":config.dir.resourcesTest] 
                                    []]
                                p
                    fi;
                    if (file config.dir.test)#exists() then
                        antTask "copy" ["todir":config.dir.targetTestClasses]
                            [antFilesetElement config.dir.test 
                                config.resourcesPatterns]
                            p
                    fi;
               done;

    compileJava = 
        target config "compile" "java" 
               [Before livecycleTargets.compile, 
               Description "Compiles java sources"]
               do p:
                    if (file config.dir.src)#exists() then
                        antTask "javac" config.javacAttributes 
                            [el "compilerarg" 
                                ["line": config.javacCompilerarg] 
                                [],
                             el "classpath" [:] 
                                (antPathElements (pathes.compile config))] 
                            p;
                    fi;
               done; 

    testCompileJava = 
        target config "compile" "test-java" 
               [Before livecycleTargets.testCompile, 
               Description "compiles java test sources"]
               do p:
                    if (file config.dir.test)#exists() then
                        antTask "javac" config.javacTestAttributes 
                            [el "compilerarg" 
                                ["line":config.javacTestCompilerarg] [],
                             el "classpath" [:] 
                                (antPathElements (pathes.test config))] 
                            p
                    fi
               done;
    javadoc = 
        target config "doc" "javadoc" 
               [Before livecycleTargets.doc, 
                Description ("create javadocs from [\(config.dir.src)] to "
                    ^"[\(config.dir.javadoc)]")] 
                do p:
                    if (file config.dir.src)#exists() then
                        antTask "delete" ["dir":config.dir.javadoc] [] p;
                        antTask "mkdir" ["dir":config.dir.javadoc] [] p;
                        antTask "javadoc" config.javadocAttributes 
                                [el "classpath" [:] 
                                (antPathElements (pathes.compile config))] 
                                p
                    fi
                done;

              

    compileYeti = 
        target config "compile" "yeti" 
                [Depends compileJava, Before livecycleTargets.compile] 
               do p:
                    if (file config.dir.src)#exists() then
                        helpers.yeticTask 
                            config.dir.targetClasses 
                            config.dir.src 
                            config.yeticIncludes 
                            config.yeticSourceReaderCode
                            (pathes.compile config) 
                            p;
                    fi
               done;
               
    testCompileYeti = 
        target config "compile" "test-yeti" 
               [Depends testCompileJava, Before livecycleTargets.testCompile] 
               do p:
                    if (file config.dir.test)#exists() then
                        helpers.yeticTask 
                            config.dir.targetTestClasses 
                            config.dir.test 
                            config.yeticIncludes 
                            config.yeticSourceReaderCode
                            (pathes.test config) 
                            p;
                    fi;
               done;
                            
    yetidoc = 
        target config "doc" "yetidoc" 
            [Before livecycleTargets.doc, 
            Depends projectBaseTargets.initDirs,
            ShortName (),
            Description "creates yetidoc"] 
            do p:
                if (file config.dir.test)#exists() then
                    antTask "delete" ["dir":config.dir.yetidoc] [] p;
                    antTask "mkdir" ["dir":config.dir.yetidoc] [] p;
                    fileSet = listFiles config.dir.src [Include "**/*.yeti", 
                                          Exclude "**/ybuilder.yeti" ];
                    helpers.yetidocTask config config.dir.yetidoc fileSet p;
                fi;
            done;
    runYeti = 
        target config "run" "runyeti"
            [Description "run yeti sourcefile",
            ShortName()] do p:
        {name,args} = if empty? p.args then 
                {name = config.runConfig.mainModule,
                args = config.runConfig.args}
            else
                {name = head p.args,
                args = tail p.args}
            fi;
        helpers.runYetiTask 
            name
            args 
            config.runConfig.yetiSrcDirs
            (config.runConfig.pathfn config)
            p
    done;

    runJava = 
        target config "run" "run"
            [Description "run a java main class",
            ShortName()] do p:
        {name,args} = if empty? p.args then 
                {name = config.runConfig.mainModule,
                args = config.runConfig.args}
            else
                {name = head p.args,
                args = tail p.args}
            fi;
        helpers.runJavaTask 
            name 
            args 
            (config.runConfig.pathfn config)
            p
    done;
//Test target
    junitTarget = 
        target config "test" "junit" [Before livecycleTargets.test] do p:
            hasJunit = try 
                (createAntClassLoader (pathes.test config) [])
                    #loadClass("junit.framework.Test");
                ((p.antProject)#getClass()#getClassLoader())
                     #loadClass("org.apache.tools.ant.taskdefs.optional.junit.JUnitTask");    
                true;
            catch Exception e:
                false;
            yrt;
                
            if (file config.dir.test)#exists() and hasJunit then
                antTask "mkdir" ["dir":config.dir.reports ^ "tests"] [] p;
                antTask "junit" ["printsummary": "yes", "haltonfailure":"yes"] 
                   [el "classpath" [:] (antPathElements (pathes.test config)),
                    el "formatter" ["type":"plain"] [],
                    el "batchtest" ["fork":"yes", 
                                    "todir": config.dir.reports ^ "tests"] 
                       [el "fileset" ["dir": config.dir.test] 
                           [el "include" ["name":"**/*Test.java"] []]]] p;
            fi
        done;
        
    yebspecTarget =
        target config "test" "yebspec" [Before livecycleTargets.test] do p:
            hasSpec = try
                (createAntClassLoader (pathes.test config) [])
                    #loadClass("org.yeb.yebspec");
                true;
            catch Exception e:
                false;
            yrt;
            modules = if empty? p.args then
                if (file config.dir.test)#exists() and hasSpec then
                    listFiles config.dir.test [Include "**/*Spec.yeti"];
                else
                    []
                fi    
            else
                if not hasSpec then
                    failWith "No yebspec jar on path, can not run yebspec tests"
                fi;
                list p.args
            fi;
            antTask "mkdir" ["dir":config.dir.reports] [] p;
            repFile = config.dir.reports ^"yebspecResults.txt";
            antTask "delete" ["file":repFile] [] p;

            if not empty? modules then
                code = "ys = load org.yeb.yebspec;"
                    ^ "res = (ys.specSuite '' [" 
                    ^ (strJoin "," . map do mo:
                        mn = if strEnds? mo ".yeti" then 
                            n = strLeft mo ((strLength mo) - 5);
                            n2 = strReplace '/' '.' n;
                            strReplace '\' '.' n2;
                        else
                            mo
                        fi;
                        "load \(mn)"
                    done) modules
                    ^ "]) none;"
                    ^ "resStr = ys.resultString res;"
                    ^ "println resStr;"
                    ^ "_ = writeFile '\(repFile)' 'utf-8' do h: h.write "
                    ^ "resStr done; if (res.exceptions + res.fails) > 0 then "
                    ^ "System#exit(1) fi;";
                //println ("----sepec:"^code);
                helpers.yetiMainTask "yebspec" 
                    ["-e",code] (pathes.test config) true "." p;
            fi;
        done;
            
    simpleTestTarget =
        target config "test" "simpleTest" [Before livecycleTargets.test] do p:
            modules = if empty? p.args then
                if (file config.dir.test)#exists() then
                    listFiles config.dir.test [Include "**/*STest.yeti"];
                else
                    []
                fi    
            else
                list p.args
            fi;
            
            repDir = config.dir.reports ^"stests/";
            antTask "delete" ["dir":repDir] [] p;
            antTask "mkdir" ["dir":repDir] [] p;

            
            if not empty? modules then
                code = "(var fails = 0;(" 
                    ^ (modules |> map do mo:
                        if strEnds? mo ".yeti" then
                            n = strLeft mo ((strLength mo) - 5);
                            n2 = strReplace '/' '.' n;
                            strReplace '\' '.' n2;
                        else
                            mo
                        fi
                    done
                    |> map do moduleName:
                        resFile = repDir ^ moduleName ^".txt";
                        "(res = (load \(moduleName))();"
                        ^ "if ((strLength res) > 6) and"
                        ^ "((strLower (strLeft res 7)) == 'failure') then"
                        ^ " fails := fails + 1 fi;"
                        ^ "println 'TestResult of \(moduleName)';"  
                        ^ "println res;"
                        ^ "_ = writeFile '\(resFile)' 'utf-8' do h: "
                        ^ " h.write res done;);";
                    done
                    |> strJoin "")
                    ^ "); if fails > 0 then System#exit(1) fi;);";
                helpers.yetiMainTask "simpleTest" 
                    ["-e", code] 
                    (pathes.test config) true "." p;
            fi;
        done;
    
    replTarget =
        target config "run" "repl" 
            [Description ("runs the yeti repl with the projects testRuntime "
                ^"classpath"),
            ShortName()] do p:
            import java.lang:ClassLoader;
            import org.apache.tools.ant:AntClassLoader;

             executeTarget livecycleTargets.initialize []
                            (createProject ());
             pat = createAntPath (pathes.testRuntime config);
             cl = new AntClassLoader(
                        ClassLoader#getSystemClassLoader()#getParent(), 
                        pat#getProject(), pat, false);
             oldCl = Thread#currentThread()#getContextClassLoader();
             Thread#currentThread()#setContextClassLoader(cl);
             _ = try
                m = cl#loadClass("yeti.lang.compiler.yeti")
                        #getMethod("main",array [classOf java.lang.String[]]);
                  m#invoke((),(array [(array p.args) as ~String[] ]) 
                                as ~String[][]);
             finally
                Thread#currentThread()#setContextClassLoader(oldCl)
             yrt;
        
        done;
                    
            
    
    projectBaseT with {
        baseTargets = {
            copyResources,
            copyTestResources,
            compileJava,
            testCompileJava,
            javadoc,
            junit = junitTarget,
            yebspec = yebspecTarget,
            simpleTest = simpleTestTarget,
            yetidoc,
            testCompileYeti,
            compileYeti,
            repl = replTarget,
            runJava,
            runYeti
        }
    });        

        
 
(load ybuilder.core.projectbase) with {
    registerBaseTargets,
    createBaseConfig,
}

