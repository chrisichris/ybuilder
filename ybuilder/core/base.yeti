/*
 * Copyright 2011 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

module ybuilder.core.base;

import java.lang.Thread;
import java.io.File;
import org.apache.tools.ant.types: FileSet;



load ybuilder.core.build;
b = load ybuilder.core.projectBase;


//task attributes
javacAttributes = 
    ["srcdir" : b.baseConfig.dir.src, 
     "destdir":b.baseConfig.dir.targetClasses,
     "includes":"**/*.java",
     "debug": "on", 
     "includeAntRuntime":"false",
     "fork": "true"];
     
var javacCompilerarg = "";

yeticAttributes = {
    var includes = [Include "**/*.yeti"],
    var sourceReaderCode = none is Some string | None ()
};

javacTestAttributes = 
    ["srcdir" : b.baseConfig.dir.test, 
     "destdir": b.baseConfig.dir.targetTestClasses,
     "includes": "**/*.java",
     "debug": "on", 
     "includeAntRuntime": "false",
     "fork": "true"];

var javacTestCompilerarg = "";

javadocAttributes = 
    ["sourcepath" : b.baseConfig.dir.src,
     "destdir": b.baseConfig.dir.javadoc];



//java targets
resourcesPatterns = 
    [Include "**/*.*", Exclude "**/*.java", Exclude "**/*.yeti"];
copyResources = 
    target "copyResources" 
           [Before b.livecycleTargets.processResources,
            Description "Copies resources from [\(b.baseConfig.dir.src), \(b.baseConfig.dir.resources)] to [\(b.baseConfig.dir.targetClasses)]"]
           do p:
                if (file b.baseConfig.dir.resources)#exists() then
                    antTask "copy" ["todir":b.baseConfig.dir.targetClasses] 
                        [el "fileset" ["dir":b.baseConfig.dir.resources] []]
                        p
                fi;
                if (file b.baseConfig.dir.src)#exists() then
                    antTask "copy" ["todir":b.baseConfig.dir.targetClasses]
                        [antFilesetElement b.baseConfig.dir.src resourcesPatterns]
                        p
                fi;
           done;
           
copyTestResources = 
    target "copyTestResources" 
           [Before b.livecycleTargets.processTestResources, 
            Description "Copies test resources to test classes dir"]
           do p:
                if (file b.baseConfig.dir.resourcesTest)#exists() then
                    antTask "copy" ["todir":b.baseConfig.dir.targetTestClasses] 
                            [el "fileset" ["dir":b.baseConfig.dir.resourcesTest] []]
                            p
                fi;
                if (file b.baseConfig.dir.test)#exists() then
                    antTask "copy" ["todir":b.baseConfig.dir.targetTestClasses]
                        [antFilesetElement b.baseConfig.dir.test resourcesPatterns]
                        p
                fi;
           done;

compileJava = 
    target "compileJava" 
           [Before b.livecycleTargets.compile, Description "Compiles java sources"]
           do p:
                if (file b.baseConfig.dir.src)#exists() then
                    antTask "javac" javacAttributes 
                        [el "compilerarg" ["line": javacCompilerarg] [],
                         el "classpath" [:] (antPathElements (b.pathes.compile b.baseConfig))] 
                        p;
                fi;
           done; 

testCompileJava = 
    target "testCompileJava" 
           [Before b.livecycleTargets.testCompile, Description "compiles java test sources"]
           do p:
                if (file b.baseConfig.dir.test)#exists() then
                    antTask "javac" javacTestAttributes 
                        [el "compilerarg" ["line":javacTestCompilerarg] [],
                         el "classpath" [:] (antPathElements (b.pathes.test b.baseConfig))] 
                        p
                fi
           done;
javadoc = 
    target "javadoc" 
           [Before b.livecycleTargets.doc, 
            Description "create javadocs from [\(b.baseConfig.dir.src)] to [\(b.baseConfig.dir.javadoc)]"] 
            do p:
                if (file b.baseConfig.dir.src)#exists() then
                    antTask "delete" ["dir":b.baseConfig.dir.javadoc] [] p;
                    antTask "mkdir" ["dir":b.baseConfig.dir.javadoc] [] p;
                    antTask "javadoc" javadocAttributes 
                            [el "classpath" [:] (antPathElements (b.pathes.compile b.baseConfig))] 
                            p
                fi
            done;

          

compileYeti = 
    target "compileYeti" [Depends compileJava, Before b.livecycleTargets.compile] 
           do p:
                if (file b.baseConfig.dir.src)#exists() then
                    b.yeticTask 
                        b.baseConfig.dir.targetClasses 
                        b.baseConfig.dir.src 
                        yeticAttributes.includes 
                        yeticAttributes.sourceReaderCode
                        (b.pathes.compile b.baseConfig) 
                        p;
                fi
           done;
           
testCompileYeti = 
    target "testCompileYeti" 
           [Depends testCompileJava, Before b.livecycleTargets.testCompile] 
           do p:
                if (file b.baseConfig.dir.test)#exists() then
                    b.yeticTask 
                        b.baseConfig.dir.targetTestClasses 
                        b.baseConfig.dir.test 
                        yeticAttributes.includes 
                        yeticAttributes.sourceReaderCode
                        (b.pathes.test b.baseConfig) 
                        p;
                fi;
           done;
                        
yetidoc = 
    target "yetidoc" 
        [Before b.livecycleTargets.doc, Depends b.baseTargets.initDirs, Description "creates yetidoc"] 
        do p:
            if (file b.baseConfig.dir.test)#exists() then
                antTask "delete" ["dir":b.baseConfig.dir.yetidoc] [] p;
                antTask "mkdir" ["dir":b.baseConfig.dir.yetidoc] [] p;
                fileSet = listFiles b.baseConfig.dir.src [Include "**/*.yeti", 
                                      Exclude "**/ybuilder.yeti" ];
                b.yetidocTask b.baseConfig.dir.yetidoc fileSet p;
            fi;
        done;
        
//Test target
junitTarget = 
    target "junit" [Before b.livecycleTargets.test] do p:
        hasJunit = try 
            (createAntClassLoader (b.pathes.test b.baseConfig) [])
                #loadClass("junit.framework.Test");
            ((p.antProject)#getClass()#getClassLoader())
                           #loadClass("org.apache.tools.ant.taskdefs.optional.junit.JUnitTask");    
            true;
        catch Exception e:
            false;
        yrt;
            
        if (file b.baseConfig.dir.test)#exists() and hasJunit then
            antTask "mkdir" ["dir":b.baseConfig.dir.reports ^ "tests"] [] p;
            antTask "junit" ["printsummary": "yes", "haltonfailure":"yes"] 
                   [el "classpath" [:] (antPathElements (b.pathes.test b.baseConfig)),
                    el "formatter" ["type":"plain"] [],
                    el "batchtest" ["fork":"yes", 
                                    "todir": b.baseConfig.dir.reports ^ "tests"] 
                       [el "fileset" ["dir": b.baseConfig.dir.test] 
                           [el "include" ["name":"**/*Test.java"] []]]] p;
        fi
    done;
    
yebspecTarget =
    target "yebspec" [Before b.livecycleTargets.test] do p:
        hasSpec = try
            (createAntClassLoader (b.pathes.test b.baseConfig) [])
                #loadClass("org.yeb.yebspec");
            true;
        catch Exception e:
            false;
        yrt;
        modules = if empty? p.args then
            if (file b.baseConfig.dir.test)#exists() and hasSpec then
                listFiles b.baseConfig.dir.test [Include "**/*Spec.yeti"];
            else
                []
            fi    
        else
            if not hasSpec then
                failWith "No yebspec jar on path, can not run yebspec tests"
            fi;
            list p.args
        fi;
        antTask "mkdir" ["dir":b.baseConfig.dir.reports] [] p;
        repFile = b.baseConfig.dir.reports ^"yebspecResults.txt";
        antTask "delete" ["file":repFile] [] p;

        if not empty? modules then
            code = "ys = load org.yeb.yebspec;"
                ^ "res = (ys.specSuite '' [" 
                ^ (strJoin "," . map do mo:
                    mn = if strEnds? mo ".yeti" then 
                        n = strLeft mo ((strLength mo) - 5);
                        n2 = strReplace '/' '.' n;
                        strReplace '\' '.' n2;
                    else
                        mo
                    fi;
                    "load \(mn)"
                done) modules
                ^ "]) none;"
                ^ "resStr = ys.resultString res;"
                ^ "println resStr;"
                ^ "_ = writeFile '\(repFile)' 'utf-8' do h: h.write resStr done;"
                ^ "if (res.exceptions + res.fails) > 0 then System#exit(1) fi;";
            //println ("----sepec:"^code);
            b.yetiMainTask ["-e",code] (b.pathes.test b.baseConfig) true "." p;
        fi;
    done;
        
simpleTestTarget =
    target "simpleTest" [Before b.livecycleTargets.test] do p:
        modules = if empty? p.args then
            if (file b.baseConfig.dir.test)#exists() then
                listFiles b.baseConfig.dir.test [Include "**/*STest.yeti"];
            else
                []
            fi    
        else
            list p.args
        fi;
        
        repDir = b.baseConfig.dir.reports ^"stests/";
        antTask "delete" ["dir":repDir] [] p;
        antTask "mkdir" ["dir":repDir] [] p;

        
        if not empty? modules then
            code = "(var fails = 0;(" 
                ^ (modules |> map do mo:
                    if strEnds? mo ".yeti" then
                        n = strLeft mo ((strLength mo) - 5);
                        n2 = strReplace '/' '.' n;
                        strReplace '\' '.' n2;
                    else
                        mo
                    fi
                done
                |> map do moduleName:
                    resFile = repDir ^ moduleName ^".txt";
                    "(res = (load \(moduleName))();"
                    ^ "if ((strLength res) > 6) and"
                    ^ "((strLower (strLeft res 7)) == 'failure') then"
                    ^ " fails := fails + 1 fi;"
                    ^ "println 'TestResult of \(moduleName)';"  
                    ^ "println res;"
                    ^ "_ = writeFile '\(resFile)' 'utf-8' do h: "
                    ^ " h.write res done;);";
                done
                |> strJoin "")
                ^ "); if fails > 0 then System#exit(1) fi;);";
            b.yetiMainTask ["-e", code] (b.pathes.test b.baseConfig) true "." p;
        fi;
    done;
      
                
        
createNewYetiProject projectDir project = 
       (for [b.baseConfig.dir.lib, 
             b.baseConfig.dir.src, 
             b.baseConfig.dir.test, 
             b.baseConfig.dir.buildExtlib] 
             do d: 
                antTask "mkdir" ["dir":(projectDir ^ d)] [] project 
        done;
                
        antTask "copy" ["todir":projectDir, "overwrite":"false"] 
                [el "javaresource" ["name":"ybuilder/core/project.yeti"] [],
                 el "javaresource" ["name":"ybuilder/core/.gitignore"] [],
                 el "mapper" ["type":"flatten"] []] 
                project);
        
        
b with {
    

    taskProps = b.taskProps with {
        yetic = yeticAttributes,
        javacAttributes,
        javacCompilerarg,
        javacTestAttributes,
        javacTestCompilerarg,
        resourcesPatterns,
    },
    
    
    createNewYetiProject, 
    
    baseTargets = b.livecycleTargets with b.baseTargets with {
        copyResources,
        copyTestResources,
        compileJava,
        testCompileJava,
        javadoc,
        junit = junitTarget,
        yebspec = yebspecTarget,
        simpleTest = simpleTestTarget,
    }
}

