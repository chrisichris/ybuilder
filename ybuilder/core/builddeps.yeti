/*
 * Copyright 2011 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

module ybuilder.core.builddeps;

load ybuilder.core.build;

libManagedDir = "lib/ybuilder/extlib_managed";

artifactDependencies = array[];					  
maven str = ("antlib:org.apache.maven.artifact.ant " ^ str);
localRepository = { 
    var layout = "default", 
    var path = "${user.home}/.m2/repository"
}; 	
remoteRepositories = array [];
exclusion groupId artifactId = 
    Exclusion {groupId is string, artifactId is string};

dependency groupId artifactId version opts = 
   (v = {groupId is string,
        artifactId is string,
        var version = version is string,
        var type = "jar", 
        var classifier = undef_str,
        var scope = "compile",
        var systemPath = undef_str,
        exclusions = array []
    };
    for opts do opt: 
        case opt of
        Type t: v.type := t;
        Classifier b: v.classifier := b;
        TestScope (): v.scope := "test";
        CompileScope (): v.scope := "compile";
        ProvidedScope (): v.scope := "provided";
        SystemScope (): v.scope := "system";
        RuntimeScope (): v.scope := "runtime";
        SystemPath b: v.systemPath := b; 
        Exclusion {groupId, artifactId} : push v.exclusions {groupId is string, artifactId is string}; 
        esac;
    done;
    push artifactDependencies v;
    ());

remoteRepository idstr url = 
    push remoteRepositories 
        {id = idstr is string, 
         url is string, 
         var layout = "default"};


retrieveLibs () = 
   (project = createProject();
    
    antTask "delete" ["dir":libManagedDir] [] project;
    antTask "mkdir" ["dir":libManagedDir] [] project;
    if not empty? artifactDependencies then
        antTask (maven "dependencies") 
                ["filesetId" : "dependenciesFS", "useScope":"runtime"] 
                ([el (maven "localRepository") 
                     ["layout":localRepository.layout, 
                      "path":localRepository.path] []] 
                 ++ (map do rr: 
                        el (maven "remoteRepository") 
                           ["id":rr.id, "url":rr.url,"layout":rr.layout] 
                           [] 
                     done remoteRepositories) 
                 ++ (map do dep: 
                        el (maven "dependency") 
                           ["groupId" : dep.groupId,
                            "artifactId" : dep.artifactId,
                            "version" : dep.version,
                            "type" : dep.type,
                            "classifier" : dep.classifier,
                            "scope" : dep.scope,
                            "systemPath": dep.systemPath]
                           (map do exc: 
                                el (maven "exclusion") 
                                   ["groupId":exc.groupId, 
                                    "artifactId":exc.artifactId] [] 
                            done dep.exclusions) 
                     done artifactDependencies)) 
                project;
                    
        antTask "copy" ["todir":libManagedDir] 
                [el "fileset" ["refid":"dependenciesFS"][],
                 el "mapper" ["type":"flatten"] []] 
                project;
    fi;
    );
{
artifactDependencies, 
localRepository, 
remoteRepositories, 
dependency, 
remoteRepository, 
retrieveLibs,
exclusion
}