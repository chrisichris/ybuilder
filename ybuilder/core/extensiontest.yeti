module ybuilder.core.extensiontest;

import java.util.Properties;
import java.io:FileInputStream, File;

load ybuilder.core.build;
load ybuilder.core.base;

extensionTestDir = path dir.main "etprojects/";
extensionTestTargetDir = path dir.target "etprojects/";


createExtensionTestDirs name project = (
    baseDir = path extensionTestDir name;
    createNewYetiProject baseDir project;
    antTask "copy" ["todir":baseDir~, "overwrite":"false"] 
        [el "javaresource" ["name":"ybuilder/core/targets.properties"][],
         el "mapper" ["type":"flatten"][]] 
        project;
        
);

createExtensionTestProject = 
    target "createExtensionTestProject" 
           [Description "creates a project for testing of an extension in [\(extensionTestDir~)]. The name of the project must be provided as a param"] do p:
        for p.args do n: 
            createExtensionTestDirs n p 
        done;
    done;
    
_doExtensionTest name project = (
    if (file (extensionTestDir ||"/\(name)"))#exists() then 
        antTask "copy" ["todir":extensionTestTargetDir || "/\(name)"] 
                [el "fileset" ["dir":extensionTestDir || "/\(name)"] []] 
                project;
        
        dir = file (extensionTestTargetDir || "/\(name)");

        argLines = 
           (fis = new FileInputStream(new File(dir,"targets.properties"));
            try 
                props = new Properties();
                props#load(fis);
                fst = string props#get("targets");
                if defined? (props#get("targets1")) then
                    [fst,(string props#get("targets1"))]
                else
                    [fst]
                fi
            finally
                fis#close();
            yrt);
        println "-------------\nextension test [\(dir#getName())]";
        for argLines do args:
            println "target: \(args)";
                        
            antTask "java" 
                    ["jar":"ybuilder.jar", "fork":"true", 
                     "dir":dir#getAbsolutePath()] 
                    [el "arg" ["line":args] []] 
                    project;
        done;
    fi;        
);    

runExtensionTests project = (
    if (file (extensionTestDir~))#exists() then
        names = if (length project.args) > 0 then
            list project.args;
        else
            rs = (file (extensionTestDir~))#list();
            if defined? rs then 
                map string rs 
            else
                []
            fi;
        fi;
        for names do n: _doExtensionTest n project done;
    fi;
);

extensionTest = 
    target "extensionTest" [InLivecycle livecycleTargets.test] runExtensionTests;

push targetsInHelp extensionTest;   
push targetsInHelp createExtensionTestProject;   

{
    init () = ();
    extensionTest, 
    runExtensionTests, 
    extensionTestDir,
    createExtensionTestProject, 
    createExtensionTestDirs
}				

