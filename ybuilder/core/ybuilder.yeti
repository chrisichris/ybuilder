/*
 * Copyright 2011 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

program ybuilder.core.ybuilder;

load ybuilder.core.base;

import java.lang.Thread;
import java.io:File;
import java.net:URLClassLoader;
import yeti.lang.compiler.yeti;

file n = new File(n is string);
args = list _argv;

buildLibsDir = dir.ybuilderLibsManaged;

retrieveBuildDependencies () =
   (import java.util.regex: Pattern;
    //content = readFile "project.yeti" "utf-8" getContents;
    {deps, reps} = if (file "project.yeti")#exists() then
        inLines = readFile "project.yeti" "utf-8" getLines;
        content = strJoin "" ((map ((flip strRight) 2) . filter ((flip strStarts?) "//")) inLines) ;

        deps = array (catSome (matchAll '\s*@buildDependency\s([^;]*);' do smatch:
                s = smatch.[1];
                a = (like '\s*"([^"]+)"\s*"([^"]+)"\s*"([^"]+)"(.*)' s) ();//"
                if empty? a then 
                    failWith "Error in @buildDependency: Arguments wrong: \(s)";
                else
                    rs = strTrim (a.[4]);
                    if strLength rs == 0 then
                        Some {dep = a, exc = []};
                    else
                        a2 = (like '\[(.*)\]' rs) ();
                        if empty? a2 then
                            Some {dep = a, exc = []};
                        else
                            exs = a2.[1];
                            exc = matchAll 
                                '\s*exclusion\s*"([^"]*)"\s*"([^"]*)"\s*,?\s*' do s: 
                                    pair s.[1] s.[2] 
                                done
                                do ws:
                                    failWith "Error in @buildDependency: Exclusion Arguments wrong: \(s):[\(ws)]"
                                done
                                exs;
                            Some {dep = a, exc};
                        fi
                    fi;            
                fi;
            done
            \none
            content));
            
        reps = array (catSome (matchAll '\s*@buildRepository\s([^;]*);' do smatch:
                s = smatch.[1];
                a = (like '\s*"([^"]+)"\s*"([^"]+)"\s*$' s) (); 
                if empty? a then 
                    failWith "Error in @buildRepository: Arguments wrong: \(s)";
                else
                    Some a
                fi;
            done
            \none
            content));
        {deps, reps}
    else
        {deps = array [], reps = array []}
    fi;

    //push to deps also jgit and stringtemplate
    //push reps ["jgit-repository", "http://download.eclipse.org/jgit/maven"];
    
    
    //retrieve the libs
    (load ybuilder.core.build;
    maven str = ("antlib:org.apache.maven.artifact.ant " ^ str);
    project = createProject();
    
    antTask "delete" ["dir":dir.ybuilderLibsManaged] [] project;
    antTask "mkdir" ["dir":dir.ybuilderLibsManaged] [] project;
    if not empty? deps then
        antTask (maven "dependencies") 
                ["filesetId" : "dependenciesFS", "useScope":"runtime"] 
                ([el (maven "localRepository") 
                     ["layout":"default", 
                      "path":"${user.home}/.m2/repository"] []] 
                 ++ (map do rr: 
                        el (maven "remoteRepository") 
                           ["id":rr.[1], "url":rr.[2],"layout":"default"] 
                           [] 
                     done reps) 
                 ++ (map do d: 
                        el (maven "dependency") 
                           ["groupId" : d.dep.[1],
                            "artifactId" : d.dep.[2],
                            "version" : d.dep.[3],
                            "scope" : "runtime"]
                            (map do exc: 
                                 el (maven "exclusion") 
                                    ["groupId":exc.fst, 
                                     "artifactId":exc.snd] [] 
                                 done d.exc) 
                     done deps)) 
                project;
                    
        antTask "copy" ["todir":dir.ybuilderLibsManaged] 
                [el "fileset" ["refid":"dependenciesFS"][],
                 el "mapper" ["type":"flatten"] []] 
                project;
    fi;
    ));
    
_withBuildClassLoader dirPrefix antFileSet fn = 
   (load ybuilder.core.build;
    import org.apache.tools.ant.AntClassLoader;
    import org.apache.tools.ant.types: FileSet;
    oL = Thread#currentThread()#getContextClassLoader();
    
    flUrl = (classOf AntClassLoader)#getProtectionDomain()
                                    #getCodeSource()#getLocation();
        
        
    antFiles = (antFileSet is ~FileSet)#getDirectoryScanner();
    antFiles#scan();
    urls = map do n: (new File(dirPrefix ^ string n))#toURL() done 
               (array antFiles#getIncludedFiles());
    ctxtLoader = if empty? urls then
            oL
        else
            import java.lang.ClassLoader;
            new URLClassLoader(array (flUrl::urls),
                               ClassLoader#getSystemClassLoader()#getParent()); 
        fi;
    Thread#currentThread()#setContextClassLoader(ctxtLoader);
    try
        fn ctxtLoader;
    finally 
        Thread#currentThread()#setContextClassLoader(oL);
    yrt);

    
if (file "project.yeti")#exists() and not (file dir.ybuilderLibsManaged)#exists() then
    retrieveBuildDependencies ();
fi;	

if (not (file "project.yeti")#exists()) and (not empty? args) and ((head args) == "newProject") then
    load ybuilder.core.build;
    load ybuilder.core.base;
    projectName = 
        if not empty? (tail args) then 
            (head (tail args)) 
        else 
            basedir 
        fi;
    createNewYetiProject projectName (createProject ()); 
    retrieveBuildDependencies ();
elif (not empty? args) and ((head args) == "new") then
    build = load ybuilder.core.build;
    
    name = if length args > 1 then
                "(Some '\((array args).[1])')"
           else "none" fi;
    
    ///retrieve git dependencies
    import java.nio.file.Files;
    tempDir = Files#createTempDirectory("ybuilder_gitjars", [])#toFile();
    tempDir#deleteOnExit();
    
    project = build.createProject ();
 
    deps = [{dep = array ["","org.eclipse.jgit", "org.eclipse.jgit","1.3.0.201202151440-r"],
             exc = []},
            {dep = array ["","org.antlr", "stringtemplate","4.0.2"],
             exc = []}];
    maven str = ("antlib:org.apache.maven.artifact.ant " ^ str);
 
    build.antTask (maven "dependencies") 
            ["filesetId" : "dependenciesFS", "useScope":"runtime"] 
            [build.el (maven "localRepository") 
                 ["layout":"default", 
                  "path":"${user.home}/.m2/repository"] [], 
             build.el (maven "dependency") 
                   ["groupId" : "org.eclipse.jgit",
                    "artifactId" : "org.eclipse.jgit",
                    "version" :"1.3.0.201202151440-r",
                    "scope" : "runtime"]
                   []]
            project;
                
    build.antTask "copy" ["todir":string tempDir] 
            [build.el "fileset" ["refid":"dependenciesFS"][],
             build.el "mapper" ["type":"flatten"] []] 
            project;

    //load the template
     antFiles = 
        (build.createAntFileSet (string tempDir)
            [Include "*.jar"]);
   
    _withBuildClassLoader (string tempDir ^ string File#separator) antFiles do ctxtLoader:
        m = ctxtLoader#loadClass("yeti.lang.compiler.yeti")
                      #getMethod("main",array [classOf java.lang.String[]]);
        _ = m#invoke((),
                (array 
                    [(array ["-e", "(load ybuilder.core.projecttemplate).newFromTemplate \(name)"]) as ~String[]]
                ) as ~String[][]);
    done;

    //run the newproject file
    if (new File("newproject.yeti"))#exits() then
        antFiles = 
            ((load ybuilder.core.build).createAntFileSet) "."
                [Include "\(dir.ybuilder)extlib/*.jar", 
                 Include "\(dir.ybuilderLibsManaged)*.jar"];

        _withBuildClassLoader "" antFiles do ctxtLoader:
            m = ctxtLoader#loadClass("yeti.lang.compiler.yeti")
                          #getMethod("main",array [classOf java.lang.String[]]);
            m#invoke((),
                    (array 
                        [(array ("newproject.yeti" :: args)) as ~String[]]
                    ) as ~String[][]);
        done;
        //delete the file
        build.antTask "delete" ["file":"newproject.yeti"] [:] project;
    fi;

    println "new project successful";

elif (not (file "project.yeti")#exists()) then
    yv = (load ybuilder.core.build).ybuilderVersion ;
    println "ybuilder - version \(yv)\n";
    println ' 
ybuilder is a simple build-enviroment for YETI the functional 
programming-language for JVM.

To use ybuilder create a new ybuilder project:

1.) copy the "ybuilder.jar" file to a new directory and 
2.) run "java -jar ybuilder.jar new chrisichris/basic" to create the needed files and 
    directories from the basic template
3.) edit the "project.yeti" file as described in the comments
4.) run "java -jar ybuilder.jar" again to get a detailed help message

For detailed description google ybuilder yeti (there is no homepage yet)
'

elif (not empty? args) and ((head args) == "cleanBuildLibs") then
    load ybuilder.core.build;
    antTask "delete" ["dir":dir.ybuilderLibsManaged][] (createProject());
elif (not empty? args) and ((head args) == "retrieveBuildLibs") then
    retrieveBuildDependencies ();
else
    antFiles = 
        ((load ybuilder.core.build).createAntFileSet) "."
            [Include "\(dir.ybuilder)extlib/*.jar", 
             Include "\(dir.ybuilderLibsManaged)*.jar"];

    _withBuildClassLoader "" antFiles do ctxtLoader:
        m = ctxtLoader#loadClass("yeti.lang.compiler.yeti")
                      #getMethod("main",array [classOf java.lang.String[]]);
        m#invoke((),
                (array 
                    [(array ("project.yeti" :: args)) as ~String[]]
                ) as ~String[][]);
    done;
fi;


        
System#exit(0);
();



