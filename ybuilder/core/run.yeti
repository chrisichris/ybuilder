/*
 * Copyright 2011 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

module ybuilder.core.run;

load ybuilder.core.build;

import java.lang:ClassLoader, Thread;
import org.apache.tools.ant:AntClassLoader;
import org.apache.tools.ant.types:Path;

withCl cl fn =
    (oldCl = Thread#currentThread()#getContextClassLoader();
    Thread#currentThread()#setContextClassLoader(cl);
    try fn() finally Thread#currentThread()#setContextClassLoader(oldCl); yrt);

repl eval = 
    (print "ybuilder> ";
    line = readln();
    if defined? line then
        ls = if strStarts? line "#" then 
                [line] 
             else 
                list (strSplit " " line) 
             fi;
        print (eval ls);
        repl eval;
    else
        println ""
    fi);



evalFun = (load yeti.lang.compiler.eval).evaluateYetiCode [] [Bind()];
evaluate argv = 
    if empty? argv then
        "\n";
    elif (head argv) == "-yeti" then
        cl = 
            (load ybuilder.core.base;
             runTarget livecycleTargets.initialize [];
             pat = createAntPath pathes.testRuntime;
             new AntClassLoader(ClassLoader#getSystemClassLoader()#getParent(), 
                                pat#getProject(), pat, false));
        _ = withCl cl 
                \(m = cl#loadClass("yeti.lang.compiler.yeti")
                        #getMethod("main",array [classOf java.lang.String[]]);
                  m#invoke((),(array [(array (tail argv)) as ~String[] ]) 
                                as ~String[][]);
        );
        "\n";
    else
        if strStarts? (head argv) "#" then
            code = strRight (strJoin " " argv) 1;
            (evalFun code).str;
        else
            nargs = 
                fold do als s:
                        addStr str =
                            (a = head als;
                            if strStarts? str "-"then
                                cut= strIndexOf str "=" 0;
                                if cut > 0 then
                                    value = strRight str (cut+1);
                                    key = strSlice str 1 cut;
                                    a.properties.[key] := value;
                                else
                                    a.properties.[strRight str 1] := "";
                                fi;
                            elif (strLength str) > 0 then
                                push a.params str
                            fi);
                        if strEnds? s "," then
                            sf = strLeft s ((strLength s) - 1);
                            addStr sf;
                            {properties = [:], params = array []}::als;
                        else
                            addStr s;
                            als;
                        fi 
                done [{properties = [:], params = array []}] argv;
                
            nargs = (reverse . filter ((not) . empty? . (.params))) nargs;
            
            //println nargs;
            //for (keys targets) println;
            try 
               for nargs do ps:
                    ns = list ps.params;
                    n = head ns;
                    if not n in targets then
                        println "\n--target: [\(n)] is no target!\n";
                        printSimilarTargets n;
                        throw new YbuilderAntException("\(n) is no target",());
                    else
                        t = targets.[n];
                        println "--target: \(n)";
                        runTarget t [Args (tail ns),
                                     Properties ps.properties];
                    fi 
                done;
                "Build successful";
            catch YbuilderAntException ex:
                "Build Failed:\n\(ex#getMessage())\n\(ex#getCause())";
            yrt;
        fi;
    fi;

argvL = list _argv;

if empty? argvL then
    println (evaluate ["help"])
elif (head argvL) == "-c" then
    repl evaluate;
else
    println (evaluate argvL)
fi;
    
System#exit(0);
();



