
/*
 * Copyright 2011 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

module ybuilder.core.projectbase;

import java.lang.Thread;
import java.io.File;
import org.apache.tools.ant.types: FileSet;



load ybuilder.core.build;

typedef shared baseConfig = 'a;

maven str = ("antlib:org.apache.maven.artifact.ant " ^ str);


//directories
baseConfig () is () -> baseConfig = {
    var name = "",
    var version = "", 
    var artifactId = "", 
    var groupId = "",
    var description = "",
    var organization = "",
    var homePage = "",
    var license = "",
    var licenseURL = "",

    localRepository = { 
        var layout = "default", 
        var path = "${user.home}/.m2"
    },

    deployRepository = {
        var url = undef_str,
        var providerArtifactId = undef_str,
        var providerVersion = "1.0-beta2",
        params = [] is list<xmlelement>,
        var uniqueVersion = false
    },
    
    dir = {
        var libManaged = "lib/managed/",
        var lib = "lib/unmanaged/",	
        var target = "target/",
        var src = "src/",
        var test = "test/",
        var reports = "target/reports/",
        var doc = "target/doc/",
        var ybuilder = "lib/ybuilder/",
        var targetClasses = "target/classes/",
        var targetTestClasses = "target/testclasses/",

        var webapp = "webapp/",
        var resources = "resources/",
        var resourcesTest = "test-resources/",
        var javadoc = "target/doc/javadoc/",
        var yetidoc = "target/doc/yetidoc/",

        buildExtlib = "lib/ybuilder/extlib/",
    }

};

createProjectBaseConfig config dependencies =
    ( //path and dependency things
    ad = array [];
    pd = array [];
    rp = array [
        {id = "chrisichris-snapshots",
        url = "http://chrisichris.github.com/chrisis-maven-repo/snapshots",
        layout = "default" },
        { id = "chrisichris", 
        url = "http://chrisichris.github.com/chrisis-maven-repo/releases",
        layout = "default" }];
        
    _pathScopeLib = 
        array [Fileset [config.dir.lib : [Include "**/*.jar"]]]; 

    _pathScopeCompile =
        array [Fileset [config.dir.libManaged : [Include "/compile/**/*.jar"]],
               Location config.dir.targetClasses];
    
    _pathScopeRuntime =
        array [Fileset [config.dir.libManaged : [Include "/runtime/**/*.jar"]]];

    _pathScopeSystem =
        array [Fileset [config.dir.libManaged : [Include "/system/**/*.jar"]]];

    _pathScopeProvided =
        array [Fileset [config.dir.libManaged : [Include "/provided/**/*.jar"]]];

    _pathScopeTest =
        array [Fileset [config.dir.libManaged : [Include "/test/**/*.jar"]],
               Location config.dir.targetTestClasses];

    for dependencies do d: case d of
        ProjectDependency d: push pd d;
        ArtifactDependency d : push ad d;
        Repository r : push rp r;
        Lib pt : push _pathScopeLib pt;
        Compile pt: push _pathScopeCompile pt;
        Runtime pt: push _pathScopeRuntime pt;
        System pt: push _pathScopeSystem pt;
        Provided pt: push _pathScopeProvided pt;
        Test pt: push _pathScopeTest pt;
    esac
    done;

    //adjust porjectDependencies
    for pd do {projectPath, artifact}:
        {scope} = artifact;
        push _pathScopeLib 
            (Fileset [(projectPath ^ config.dir.lib) : [Include "**/*.jar"]]); 
        pushLoc pS =
            push pS (Location (projectPath ^ config.dir.targetClasses));
        pushTD pS dpS =
            push pS 
                 (Fileset [projectPath ^ config.dir.libManaged 
                          : [Include "/\(dpS)/**/*.jar"]]);
        //scope dependencies according to maven:
        //http://www.sonatype.com/books/mvnref-book/reference/pom-relationships-sect-project-dependencies.html                
        if scope == "compile" then
            pushLoc _pathScopeCompile;
            pushTD _pathScopeCompile "compile";
            pushTD _pathScopeRuntime "runtime";
        elif scope == "provided" then
            pushLoc _pathScopeProvided;
            pushTD _pathScopeProvided "compile";
            pushTD _pathScopeProvided "provided";
            pushTD _pathScopeProvided "runtime";
        elif scope == "runtime" then
            pushLoc _pathScopeRuntime;
            pushTD _pathScopeRuntime "compile";
            pushTD _pathScopeRuntime "runtime";
        elif scope == "test" then
            pushLoc _pathScopeTest;
            pushTD _pathScopeTest "compile";
            pushTD _pathScopeTest "runtime";
        fi;
    done;
    

    config = (config is baseConfig )  with {
        artifactDependencies = ad,
        projectDependencies = pd,
        remoteRepositories = rp,
        pathScopeLib is pathPatternType = _pathScopeLib, 
        pathScopeCompile is pathPatternType = _pathScopeCompile,
        pathScopeRuntime is pathPatternType = _pathScopeRuntime,
        pathScopeSystem is pathPatternType = _pathScopeSystem,
        pathScopeProvided is pathPatternType = _pathScopeProvided,
        pathScopeTest is pathPatternType = _pathScopeTest,
        jarManifest = [:] is hash<string,string>,
        jarAttributes is hash<string,string> = [:],
                                 
        jarFileset = [ config.dir.targetClasses : []],


        warAttributes = ["webxml": config.dir.webapp ^ "WEB-INF/web.xml"],

        warLibset = 
             [config.dir.lib : [Include "**/*.jar"],
              config.dir.libManaged : [Include "compile/**/*.jar",
                                Include "runtime/**/*.jar"]],
                               
        warClassesset =
            [config.dir.targetClasses : [Include "**/*.*"]],

        warFileset = [config.dir.webapp : [Include "**/*.*"]],

        continuesDirs = array [config.dir.src],
    } with (createBuildConfig());
    config);
    

//pathes
buildExtPath config is 'a -> pathPatternType =  
          array [Fileset [config.dir.buildExtlib : [Include "**/*.jar"]], 
           Fileset ["ybuilder/extlib_managed/": [Include "*.jar"]]];
           
runtimePath config is 'a -> pathPatternType =  
          array [PathPatterns \config.pathScopeCompile,
           PathPatterns \config.pathScopeRuntime,
           PathPatterns \config.pathScopeSystem,
           PathPatterns \config.pathScopeLib];
           
compilePath config is 'a -> pathPatternType = 
          array [PathPatterns \config.pathScopeCompile,
           PathPatterns \config.pathScopeProvided,
           PathPatterns \config.pathScopeSystem,
           PathPatterns \config.pathScopeLib];
           
testPath config is 'a -> pathPatternType = 
          array [PathPatterns \config.pathScopeCompile,
           PathPatterns \config.pathScopeProvided,
           PathPatterns \config.pathScopeSystem,
           PathPatterns \config.pathScopeRuntime,
           PathPatterns \config.pathScopeTest,
           PathPatterns \config.pathScopeLib];
           
testRuntimePath config is 'a -> pathPatternType = 
         array [PathPatterns \(testPath config)];


//dependency management


dependency groupId artifactId version opts = 
   (v = {
        groupId is string,
        artifactId is string,
        var version = version is string,
        var type = "jar", 
        var classifier = undef_str,
        var scope = "compile",
        var systemPath = undef_str,
        exclusions = array [],
        var optional = false,
    };
    var projectPath = "";
    
    for opts do opt: 
        case opt of
        Type t: v.type := t;
        Classifier b: v.classifier := b;
        TestScope (): v.scope := "test";
        CompileScope (): v.scope := "compile";
        ProvidedScope (): v.scope := "provided";
        SystemScope (): v.scope := "system";
        RuntimeScope (): v.scope := "runtime";
        Optional b: v.optional := b;
        SystemPath b: v.systemPath := b;
        Project str: projectPath := str;
        Exclusion {groupId, artifactId} : 
            push v.exclusions {groupId is string, artifactId is string}; 
        esac;
    done;
    
    if (strLength projectPath) > 0 then
        if not (strEnds? projectPath "/") then
            projectPath := projectPath ^ "/";
        fi;
        
        ProjectDependency 
            {projectPath = projectPath, 
              artifact = v};
    else
        ArtifactDependency v;
    fi);

remoteRepository idstr url = 
    Repository {
            id = idstr is string, 
            url is string, 
            var layout = "default"
        };

exclusion groupId artifactId = 
    Exclusion {groupId is string, artifactId is string};




//helper functions
runJavaTask mainClassName args dir path project =
    (antTask "java"
        ["classname":mainClassName,
         "fork":"true",
         "dir":dir,
         "failonerror":"true"]
        ((el "classpath" [:] (antPathElements path)
         :: (map do a: el "arg" ["value":a] [] done args)))
        project);

yetiMainTask args path fork dir project = 
   if fork then
        antTask "java" 
                ["classname":"yeti.lang.compiler.yeti", 
                 "fork":"true",
                 "dir": dir,
                 "failonerror":"true"]
                ((el "classpath" [:] (antPathElements path) 
                 :: (map do a: el "arg" ["value":a] [] done args))) 
                project;
    else
        urls = 
            map do n: (file n)#toURL() done (listPath path);
        
        import java.lang.ClassLoader;
        import java.net.URLClassLoader;
        cl = new URLClassLoader(array urls, 
                                ClassLoader#getSystemClassLoader()#getParent());
        
        oldCl = Thread#currentThread()#getContextClassLoader();
        Thread#currentThread()#setContextClassLoader(cl);
        try
            m = cl#loadClass("yeti.lang.compiler.yeti")
                          #getMethod("main",array [classOf java.lang.String[]]);
            m#invoke((),
                    (array [(array (args is list?<string>)) as ~String[]]
                        ) as ~String[][])
        finally 
            Thread#currentThread()#setContextClassLoader(oldCl);
        yrt;
        ();
    fi;

runYetiTask sourceName args dir path project =
    (println String#format(
        "%1$11s Running \(sourceName) at \(dir)", 
        array ["[yeti]"]);
    yetiMainTask (sourceName :: args) path true dir project);
    
     
yetidocTask config targetDir files project=     
   (args = ["-doc", "../"^targetDir] ++ files;
    yetiMainTask args (testPath config) true config.dir.src project);
    
yeticTask targetDir srcDir includes sourceReaderCode path project =
   (files = listFiles srcDir includes 
        |>map (srcDir^);
    println String#format(
        "%1$11s Compiling \(length files) files to \(targetDir)", 
        array ["[yetic]"]);
    if "verbose" in project.properties then
        println String#format(
            "%1$11s files", 
            array ["[yetic]"]);
        for files do f:
            println String#format(
                "%1$11s \(f)", 
                array [""]);
        done;
        println String#format(
            "%1$11s sourceDir: \(srcDir)", 
            array ["[yetic]"]);
        println String#format(
            "%1$11s path", 
            array ["[yetic]"]);
        for (listPath path) do f:
            println String#format(
                "%1$11s \(f)", 
                array [""]);
        done;
    fi;

    //files = ["ybuilder/core/base.yeti"]; 

    if not empty? files then
        code = 
"""import yeti.lang.compiler.CompileException;
ret = try
    eval = load yeti.lang.compiler.eval;
    eval.compileYetiFiles [To '\(targetDir)'
        \(sourceReaderCode |> maybe "]" do c: ", \(c)]" done)
        [SourceDir '\(srcDir)']
        ['\(strJoin "','" files)'];
        System#exit(0);
catch CompileException ex: 
    println ('Compile Error: \n' ^ ex#getMessage());
    System#exit(1)
yrt;
ret 
""";

        args = ["-e", code];
        yetiMainTask args path true "." project
    fi);    

           

_mvnDependencyTags artifactDependencies =     
    map do dep: 
        atts = 
           ["groupId" : dep.groupId,
            "artifactId" : dep.artifactId,
            "version" : dep.version,
            "type" : dep.type,
            "scope" : dep.scope,
            "systemPath": dep.systemPath,
            "optional" : string dep.optional];
        if defined? dep.classifier then
            atts["classifier"] := dep.classifier
        fi;
        if defined? dep.systemPath then
            atts["systemPath"] := dep.systemPath;
        fi;
        
        el (maven "dependency") atts 
            (map do exc: 
                 el (maven "exclusion") 
                    ["groupId":exc.groupId, 
                     "artifactId":exc.artifactId] [] 
                 done dep.exclusions) 
    done artifactDependencies;

_pomName config = config.dir.target^"pom.xml";

writePom config p=
    (//first init pom
    antTask "mkdir" ["dir":config.dir.target] [] p;
    antTask (maven "pom") 
        ["id" : "pom",
         "groupId" : config.groupId,
         "artifactId" : config.artifactId,
         "version" : config.version,
         "name" : config.name]
        (if (strLength config.license) > 0 
             and (strLength config.licenseURL) > 0 then
            [el "license" ["name":config.license,
                          "url": config.licenseURL] []]
         else
            []
         fi 
         ++  _mvnDependencyTags 
                (config.artifactDependencies
                ++ map (.artifact) config.projectDependencies))
        p;
    antTask "delete" ["file":_pomName config] [] p;
    antTask (maven "writepom")
             ["pomRefId" : "pom", "file":_pomName config] [] p);
    
mvnInstall config fileName project = 
   (pomfile = _pomName config;
    writePom config project;
    antTask (maven "pom") ["id":"installPom", "file":pomfile][] project;
    antTask (maven "install") 
            ["file": fileName]
            [el "pom" ["refid":"installPom"] []]
            project);

mvnDeploy config fileName project =
   (if defined? config.deployRepository.providerArtifactId then
        antTask (maven "install-provider") 
                ["artifactId":config.deployRepository.providerArtifactId,
                 "version":config.deployRepository.providerVersion] 
                [] project;
    fi;
    pomfile = _pomName config;
    writePom config project;
    antTask (maven "pom") ["id":"installPom", "file":pomfile][] project;
    antTask (maven "deploy") 
            ["file":fileName, 
             "uniqueVersion": string config.deployRepository.uniqueVersion]
            (if defined? config.deployRepository.url then
                [el "remoteRepository" ["url":config.deployRepository.url]
                    (list config.deployRepository.params)]
             else
                args = list project.args;
                if (length args) < 2 then
                    []
                else
                    rep = head (tail args);
                    [el "remoteRepository" ["url":rep] []]
                fi
             fi
             ++ [el "pom" ["refid":"installPom"] []])
             project);
    
_mvnInstallOrDeploy config fileName project = 
   (if contains? ":install" project.args then
        mvnInstall config fileName project;
    fi;
    if contains? ":deploy" project.args then
        mvnDeploy config fileName project;
    fi);

            
    
    
//lifecycle targets

registerProjectBaseTargets config = 
(continuous = 
    target config "util" "continuous" 
       [Description "Continouesly runs the target given as argument",
       ShortName()]
       do p:
            if empty? p.args then
                failWith 
                    "No command to run for continue please pvoide one as arg";
            fi;
            cmd = head (list p.args);
            args = tail (list p.args);

            if not cmd in config.targets then
                failWith "[\(cmd)] is no target";
            fi;

            scf = if "dir" in p.properties then
                [file p.properties["dir"]];
            else
                map file config.continuesDirs;
            fi;
            
            tar = config.targets[cmd];
            props = p.properties;
            
            println "---\nStarting continues target [\(cmd) \(args)]\n";

            import java.nio.file:FileSystems,
                                StandardWatchEventKinds;

            fileWatcher = FileSystems#getDefault()#newWatchService();
            
            registerDirs file is ~File -> () = 
                if file#isDirectory() then
                    _ = file#toPath()#register(fileWatcher, 
                                     [StandardWatchEventKinds#ENTRY_CREATE,
                                      StandardWatchEventKinds#ENTRY_DELETE,
                                      StandardWatchEventKinds#ENTRY_MODIFY]);
                   for (array file#listFiles()) registerDirs;
                fi;
            for scf registerDirs;
            true loop 
                (//wait blocking for next file event
                _ = fileWatcher#take();
                //clear off other file events in the queue
                (nullptr? fileWatcher#poll()) loop ();
                
                time = System#currentTimeMillis();
                _ = runTarget tar [Args args, Properties props];
                println 
                  "build-time: \((System#currentTimeMillis() - time) / 1000)");
       done;


preClean = 
    target config "livecycle" "preClean" 
           [Description "invoked befroe main clean"] 
           \();
           
clean = 
    target config "livecycle" "clean" 
           [Depends preClean,  
            Description "cleans the build [\(config.dir.target)] dir",
            ShortName ()] 
           (antTask "delete" ["dir" : config.dir.target] []);

cleanLibs = 
    target config "libs" "cleanLibs" 
           [Description ("Cleans the retrieved dependencies "
                        ^"in [\(config.dir.libManaged)] directory")] 
           (antTask "delete" ["dir":config.dir.libManaged] []);
cleanAll = 
    target config "livecycle" "cleanAll" 
           [Dependencies[cleanLibs, clean],
           ShortName (),
           Description "Cleans the project and all the libs"] 
           \();
           
           

validate = target config "livecycle" "validate" [] \();

initializeBuild = 
    target config "livecycle" "initializeBuild" [Depends validate] \();
    
initialize = 
    target config "livecycle" "initialize" [Depends initializeBuild] 
           (antTask "mkdir" ["dir": config.dir.target] []);

generateResources = 
    target config "livecycle" "generateResources" [Depends initialize] \();
processResources = 
    target config "livecycle" "processResources" 
        [Depends generateResources] \();
compile = 
    target config "livecycle" "compile" [Depends processResources,
                      Description "Compiles the sources of the project",
                      ShortName ()] 
                      \();
processClasses = 
    target config "livecycle" "processClasses" [Depends compile] \();

generateTestResources = 
    target config "livecycle" "generateTestResources" 
        [Depends processClasses] \();
processTestResources = 
    target config "livecycle" "processTestResources" 
        [Depends generateTestResources] \();
testCompile = 
    target config "livecycle" "testCompile" [Depends processTestResources] \();
processTestClasses = 
    target config "livecycle" "processTestClasses" [Depends testCompile] \();
test = 
    target config "livecycle" "test" [Depends processTestClasses,
                   Description "runs the tests of the project",
                   ShortName ()] \();
preparePackage = 
    target config "livecycle" "preparePackage" 
        [Depends cleanAll, Depends test] \(); 
    
preDoc = target config "doc" "preDoc" [Depends initialize] \();

doc = target config "doc" "doc" [Depends preDoc,
                    Description "Generates project documentation",
                    ShortName()] \();	

//mvn things
                 
                 
        
             
pom =
    target config "maven" "pom" [Description "Writes a pom.xml"] 
           do p: writePom config p done;

prepareLibs = 
    target config "libs" "prepareLibs" 
        [Before initialize, 
         Description "loads librararies in [\(config.dir.libManaged)]"] 
        do project:
            copyDeps scope = 
               (antTask "mkdir" 
                        ["dir":"\(config.dir.libManaged)\(scope)"] 
                        [] 
                        project;
                if not empty? config.artifactDependencies then
                    antTask (maven "dependencies") 
                            ["filesetId" : "dependenciesFS-"^scope, 
                             "scopes":scope] 
                            ([el (maven "localRepository") 
                                ["layout":config.localRepository.layout, 
                                    "path":config.localRepository.path] []] 
                            
                             ++ (map do rr: 
                                    el (maven "remoteRepository") 
                                       ["id":rr.id, "url":rr.url,
                                        "layout":rr.layout] 
                                       [] 
                                   done config.remoteRepositories) 
                             ++ (_mvnDependencyTags config.artifactDependencies) ) 
                            project;
                            
                    antTask "copy" 
                            ["todir":"\(config.dir.libManaged)\(scope)"] 
                            [el "fileset" ["refid":"dependenciesFS-" ^ scope][],
                            el "mapper" ["type":"flatten"] []] 
                            project;
                fi);
            
            if not (file config.dir.lib)#exists() then
                antTask "mkdir" ["dir":config.dir.lib] [] project;
            fi;
            
            scopes =["test","compile","system","provided","runtime"];
            
            if not (file config.dir.libManaged)#exists() then
                for scopes copyDeps;
            else
                for scopes do scope:
                    antTask 
                        "mkdir" 
                        ["dir":config.dir.libManaged ^ scope] 
                        [] 
                        project
                done
            fi;
        done;

 retrieveLibs =
    target config "libs" "retrieveLibs" 
            [Description "loads libraries in [\(config.dir.libManaged)]",
            ShortName()]
        do p:
            antTask "delete" ["dir":config.dir.libManaged] [] p;
            _ =executeTarget prepareLibs [RunAlways true] p;
        done;


    
    
jarOnly = 
    target config "package" "jarOnly" 
           [Description "Makes a jar file in dir.target"] 
           do p:
                destfl = config.dir.target ^ config.artifactId ^ ".jar";
                antTask "jar" 
                        (nh = copy config.jarAttributes;
                         nh["destfile"] := destfl;
                         nh)
                        (mapHash do dir ie:
                            antFilesetElement dir ie;
                         done config.jarFileset
                         ++ [el "manifest" [:] 
                               (mapHash do k v: 
                                 el "attribute" ["name":k, "value":v] [] 
                               done config.jarManifest)] ) 
                        p;
           done;

jar = 
    target config "package" "jar" 
           [Depends preparePackage, Depends jarOnly,
            Description ("Makes a jar file in dir.target - use :install "
                 ^"and/or :deploy param(s) to maven install/deploy the war"),
            ShortName()] 
    do p:
        destfl = config.dir.target ^ config.artifactId ^ ".jar";
        _mvnInstallOrDeploy config destfl p;
    done;
    
war = 
    target config "package" "war" 
           [Depends preparePackage, 
            Description ("Makes a war file in dir.target - use :install" 
               ^"and/or :deploy param(s) to maven install/deploy the war"),
            ShortName()]
            do p:
                destfl = config.dir.target ^ config.artifactId ^ ".war";
                antTask "war" 
                        (nh = copy config.warAttributes;
                         nh["destfile"] := destfl;
                         nh)
                        ((mapHash do dir ie:
                            el "lib" ["dir":dir] (antInExcludeElements ie);
                          done config.warLibset)
                         ++ (mapHash do dir ie:
                            el "classes" ["dir" :dir] (antInExcludeElements ie);
                          done config.warClassesset)
                         ++ (mapHash do dir ie:
                            antFilesetElement dir ie;
                          done config.warFileset))
                        p;
                _mvnInstallOrDeploy config destfl p;
            done;
/*
jetty =
    target config "run" "jetty" [Depends initialize,
                    Description ("runs jetty - note the jetty libs must be" 
                        ^"on the ybuilder path")] 
    do project:
        import java.lang.System;
        import org.eclipse.jetty.server:Server; 
        import org.eclipse.jetty.server.nio:BlockingChannelConnector;
        import org.eclipse.jetty.webapp:WebAppContext;

        server = new Server(8080);
        if (strIndexOf (strLower (System#getProperty("os.name"))) 
            "win" 0) > -1 then
            blockingConnector = new BlockingChannelConnector();
            blockingConnector#setPort(8080);
            connectors = array [blockingConnector];
            server#setConnectors(connectors);
        fi;
        
        context = new WebAppContext();
        context#setDescriptor((config.warAttributes["webxml"]));
        context#setResourceBase(config.dir.webapp);
        context#setContextPath("/");
        context#setParentLoaderPriority(false);
        
        path = strJoin ", " (listPath (runtimePath config));
        context#setExtraClasspath(path);
        
        server#setHandler(context);
        server#start();
        server#join();
    done;
*/

//path targets    
initDirs = 
    target config "init" "initDirs" [Before initialize,Depends prepareLibs] 
            do project:
                antTask "mkdir" ["dir":config.dir.targetClasses] [] project;
                antTask "mkdir" ["dir":config.dir.targetTestClasses][] project;
            done;
    
initBuildPathes = 
    target config "init" "initBuildPathes" 
            [Before initializeBuild,Depends prepareLibs] 
          (antTask "path" ["id":"buildExtPath"] 
                    (antPathElements (buildExtPath config)));


for [clean, retrieveLibs, compile, test, jar, war, 
     doc, pom, cleanLibs, cleanAll, continuous]
    (push config.targetsInHelp);

(registerBuildTargets config) with {
    livecycleTargets = {
        preClean, 
        clean, 
        cleanAll, 
        validate, 
        initializeBuild, 
        initialize, 
        generateResources, 
        processResources,
        compile, 
        processClasses, 
        generateTestResources, 
        processTestResources, 
        testCompile, 
        processTestClasses, 
        test, 
        preparePackage,
        preDoc, 
        doc,  
    },	
    projectBaseTargets = {
        //jetty,
        initBuildPathes,
        prepareLibs,
        retrieveLibs, 
        cleanLibs, 
        initDirs,
        war,
        jar,
        jarOnly,
        pom,
        continuous,
    },


}
);


{
    baseConfig,
    pathes = {
        buildExt = buildExtPath,
        runtime = runtimePath,
        compile = compilePath,
        test = testPath,
        testRuntime = testRuntimePath,
    },
    helpers = {
        yetiMainTask,
        yetidocTask,
        yeticTask,
        runYetiTask,
        runJavaTask,
        writePom,
        mvnInstall,
        mvnDeploy,
        mvnInstallOrDeploy = _mvnInstallOrDeploy,
    },
    createProjectBaseConfig,
    registerProjectBaseTargets,   

    dependency, 
    exclusion,
    remoteRepository,
}
