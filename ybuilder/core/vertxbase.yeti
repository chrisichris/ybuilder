/*
 * Copyright 2012 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

module ybuilder.core.vertxbase;

import java.lang.System;

load ybuilder.core.build;

createVertxConfig config = 
    {
        var vertxModsDir = "mods/",
        var vertxConfDir = "mods/conf/",
        var vertxMainModuleName = "main~main~1",
        var vertxSysProps = [:] is hash<string,string>, 
         //["vertx.langs.yeti":"yeb.vertx.YetiVerticleFactory"],
        var vertxTestModuleName = "test~test~1",
        var vertxIntegrationTestModuleName = "test~integration~1",
    };


vertxTask config fork dir args sysPropsIn p = 
   (sysProps = copy config.vertxSysProps;
    insertHash sysProps sysPropsIn;

    cpP = array [PathPatterns \(config.pathScopeProvided is pathPatternType)];

    //config for vertx
    if (file config.vertxConfDir)#exists() then
        push cpP (Location config.vertxConfDir);
    fi;
   

    /* Language support is now in submodules do not put here
    jythonHome =System#getenv("JYTHON_HOME");  
    jrubyHome =System#getenv("JRUBY_HOME");  
    if defined? jythonHome then
        push cpP (Location (jythonHome^"/jython.jar"));
        sysProps["jython.home"] := jythonHome;
    fi;
    if defined? jrubyHome then
        push cpP (Location (jrubyHome^"/lib/jruby.jar"));
        sysProps["jruby.home"] := jrubyHome;
    fi;
    */

    logInfo p "vertx" "command: vertx \(strJoin " " args)";
    if logVerbose? then
        logVerbose p "vertx" "System-Properties: \(sysProps)";
        logVerbose p "vertx" "classpath: \(listPath cpP)";
        logVerbose p "vertx" ("configDir: \(config.vertxConfDir) exists: "
               ^ "\((file config.vertxConfDir)#exists())");                      
    fi;

    antTask "java" ["classname":"org.vertx.java.platform.impl.cli.Starter",
                   "fork":string (fork is boolean),
                   "dir":dir,
                   "failonerror":"true",
                   "taskname":"vertx"]
                   ([el "classpath" [:] (antPathElements (cpP))]
                    ++ (map do a: el "arg" ["value":a] [] done args)
                    ++ (mapHash do k v:
                            el "sysproperty" ["key" : k, "value":v] []
                        done sysProps)) 
                    p);

vertxRunPath config = 
    listPath ([PathPatterns \config.pathScopeCompile,
                 Location (config.dir.targetClasses)]);

vertxTestPath config =
    listPath ([PathPatterns \config.pathScopeCompile, 
                 PathPatterns \config.pathScopeTest,
                 Location (config.dir.targetClasses),
                 Location (config.dir.targetTestClasses)]);
    
_runMod config fork default sysProps project =
    (mn = if empty? project.args then
        default
    else
        head project.args
    fi;
    if not (file (config.vertxModsDir^mn))#exists() then
        logInfo project "vertx" "no module with name \(mn)";
    else
        vertxTask config
            fork
            (readArg "-dir" "." project.args) 
            ["runmod", mn] 
            sysProps
            project
    fi);



//fn to copy module libs to module dir
moduleLibsFn config p=
    (targetDir = config.vertxModsDir^config.vertxMainModuleName^"/lib/";
    antTask "delete" ["dir":targetDir] [] p;
    antTask "mkdir" ["dir":targetDir] [] p;
    antTask "copy" ["todir":targetDir]
        [antFilesetElement (config.dir.libManaged^"compile/") 
                            [Include  "*.jar"]] p;
    antTask "copy" ["todir":targetDir, 
                    "flatten":"true"]
                   [antFilesetElement config.dir.lib [Include "**/*.jar"]] p);

registerVertxTargets config =
    (//add fn to retrieveDependencies target
    doAfterTarget 
        config.projectBaseTargets.retrieveDependencies 
        (moduleLibsFn config);

    vertxCompile = 
        target config "vertx" "compile" 
            [Depends config.livecycleTargets.compile,
             Depends config.projectBaseTargets.jarOnly,
             Before config.livecycleTargets.testCompile,
             Description 
                "Makes jar or classes in src  copies it to vertx module"]
        do p:
            targetDir = config.vertxModsDir^config.vertxMainModuleName^"/";
            flName = config.artifactId^"-"^config.version^".jar";
            antTask "mkdir" ["dir":targetDir] [] p;
            if (file (config.dir.target ^ flName))
                    #exists() then
                antTask "copy" ["todir":targetDir^"lib",
                            "overwrite":"true"]
                    [antFilesetElement config.dir.target 
                        [Include flName]] p;
            fi;
        done;    

    _modFile config = 
        config.dir.target 
        ^ config.groupId
        ^ "~"
        ^ config.artifactId 
        ^ "~"
        ^ config.version
        ^ ".zip";
    
    vertxZipModule = 
        target config "vertx" "zip-module"
            [Depends config.livecycleTargets.preparePackage,
             Description "bundles creates the vertx module and 
                              copies it to target"]
        do p:

            antTask "zip" 
                    ["destfile": _modFile config]
                    [antFilesetElement 
                            (config.vertxModsDir^config.vertxMainModuleName) 
                            [Include "**/*.*"]] 
                    p;
        done;

    vertxJarArtifact =
        target config "vertx" "jar-artifacts"
            [Depends vertxZipModule,
            Before config.projectBaseTargets.jarArtifacts,
            Description "copys the module to the targetArtifacts directory
                        for deployment"]
        do p:
            targetFile = config.dir.targetArtifacts
                ^ config.artifactId
                ^ "-" ^ config.version ^ "-noclassifier.zip";
            antTask "copy" 
                ["file": _modFile config,
                "tofile" :targetFile] [] p;
        done;
/*
    vertxModule =
        target config "vertx" "module"
            [Depends vertxZipModule,
            Description "creates the vertx module and deploys/installs it"]
        do p:
            load ybuilder.core.projectbase;
            pp = helpers.pomParts config "zip";
            pp = pp with {pomDeps = []};
            pp.pomHash["artifactId"] := config.artifactId;

            pomfile = helpers.preparePom "modpom.xml" config.dir.target 
                                "modpom.xml"
                                pp config p;

            helpers.mvnInstallOrDeploy config pomfile (_modFile config) p;
        done;
*/
    
    vertxMain = 
        target config "vertx" "main" 
            [Description "runs the current main vertx module or the one
            given as parameter"]
        (_runMod config true config.vertxMainModuleName [:]);
        
    vertxRepl = 
        target config "vertx" "repl"
            [Description "runs a repl in the current main vertx module"]
        (_runMod config false config.vertxMainModuleName ["yvertx.repl":"true"]);

    vertxCmd =
        target config "vertx" "cmd"
            [Description "runs vertx with the given parameters
            To specify a run directory use -dir directory flag"]
        do p:
            vertxTask config true (readArg "-dir" "." p.args) p.args [:] p;
        done;

    vertxTest = 
        target config "vertx" "test"
            [Before config.livecycleTargets.test,
             Description "runs the vertx test module, 
                or the one given as name"]
        (_runMod config true config.vertxTestModuleName [:]);

    vertxIntegrationTest = 
        target config "vertx" "integration-test"
            [Before config.livecycleTargets.integrationTest,
             Description "runs the vertx test module, 
                or the one given as name"]
        (_runMod config true config.vertxIntegrationTestModuleName [:]);
    {
        vertxTargets = {
            vertxCompile,
            vertxZipModule,
            vertxMain,
            vertxRepl,
            vertxCmd,
            vertxTest,
        }
    });
{
    createVertxConfig,
    registerVertxTargets,
    vertxHelpers = {
        vertxTask,
        vertxRunPath,
        vertxTestPath,
    },
    //vertxMavenName config =
    // "\(config.groupId)~\(config.artifactId)~\(config.version).zip",
}
