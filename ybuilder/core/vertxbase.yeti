/*
 * Copyright 2012 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

module ybuilder.core.vertxbase;

import java.lang.System;

load ybuilder.core.build;
b = load ybuilder.core.projectbase;
bu = load ybuilder.core.build;

createVertxConfig useVertxHomeOnSystemPath config = 
    (vertxHome = System#getenv("VERTX_HOME");
    vertxHome = if useVertxHomeOnSystemPath and not defined? vertxHome then
        failWith "Vertxhome is set to be on path but is not defined"
    else
        string vertxHome;
    fi;
    
    if not defined? vertxHome then
        println ("Warning: VERTX_HOME enviroment variable is not defined" 
                    ^"some tasks will not work")
    fi;
   
    if useVertxHomeOnSystemPath then
        //add all the vert.x dependencies
        push config.pathScopeLib 
            (Fileset ["\(vertxHome)/lib":[Include "**/*.jar"]]);
    fi;

    {
        var useVertxHomeOnSystemPath = useVertxHomeOnSystemPath,
        var vertxHome = vertxHome,
        var vertxModsDir = "mods/",
        var vertxModuleName = "main",
        var vertxTestModuleName = "test",
        var vertxFullModuleName = 
            "\(config.groupId).\(config.artifactId)-v\(config.version)", 
    });

vertxTask config args p = 
   (jythonHome =System#getenv("JYTHON_HOME");  
   jrubyHome =System#getenv("JRUBY_HOME");  
   
   sysProps = [:]; 
   cpP = if config.useVertxHomeOnSystemPath then
       array [Fileset [config.vertxHome^"/lib" : [Include "**/*.jar"]]];
   else
       array [PathPatterns \(config.pathScopeProvided is pathPatternType)];
   fi;

   if defined? config.vertxHome then
       sysProps["java.util.logging.config.file"] 
            := config.vertxHome^"/conf/logging.properties";
       push cpP (Location (config.vertxHome^"/conf"));
   fi;
   if defined? jythonHome then
       push cpP (Location (jythonHome^"/jython.jar"));
       sysProps["jython.home"] := jythonHome;
   fi;
   if defined? jrubyHome then
       push cpP (Location (jrubyHome^"/lib/jruby.jar"));
       sysProps["jruby.home"] := jrubyHome;
   fi;
  
    
   antTask "java" ["classname":"org.vertx.java.deploy.impl.cli.Starter",
                   "fork":"true",
                   "failonerror":"true"]
                   ([el "classpath" [:] (antPathElements (cpP))]
                    ++ (map do a: el "arg" ["value":a] [] done args)
                    ++ (mapHash do k v:
                            el "sysproperty" ["key" : k, "value":v] []
                        done sysProps)) 
                    p);

vertxRunPath config = 
    listPath ([PathPatterns \config.pathScopeCompile,
                 Location (config.dir.targetClasses)]);

vertxTestPath config =
    listPath ([PathPatterns \config.pathScopeCompile, 
                 PathPatterns \config.pathScopeTest,
                 Location (config.dir.targetClasses),
                 Location (config.dir.targetTestClasses)]);
    



//fn to copy module libs to module dir
moduleLibsFn config p=
    (targetDir = config.vertxModsDir^config.vertxModuleName^"/lib/";
    antTask "delete" ["dir":targetDir] [] p;
    antTask "mkdir" ["dir":targetDir] [] p;
    antTask "copy" ["todir":targetDir]
        [antFilesetElement (config.dir.libManaged^"compile/") 
                            [Include  "*.jar"]] p;
    antTask "copy" ["todir":targetDir, 
                    "flatten":"true"]
                   [antFilesetElement config.dir.lib [Include "**/*.jar"]] p);

registerVertxTargets config =
    (//add fn to retrieveDependencies target
    bu.doAfterTarget 
        config.projectBaseTargets.retrieveLibs 
        (moduleLibsFn config);

    vertxCompile = 
        target config "vertx" "compile" 
            [Depends config.livecycleTargets.compile,
             Depends config.projectBaseTargets.jarOnly,
             Before config.livecycleTargets.testCompile,
             Description 
                "Makes jar or classes in src  copies it to vertx module"]
        do p:
            targetDir = config.vertxModsDir^config.vertxModuleName^"/";
            antTask "mkdir" ["dir":targetDir] [] p;
            antTask "copy" ["todir":targetDir^"lib",
                            "overwrite":"true"]
                    [antFilesetElement config.dir.target 
                        [Include "\(config.artifactId).jar"]] p;
        done;    

    vertxZipModule = 
        target config "vertx" "zipModule"
            [Depends config.livecycleTargets.preparePackage,
             Description "bundles creates the vertx module and 
                              copies it to target"]
        do p:
            tDir = config.dir.target
                    ^config.vertxModsDir
                    ^config.vertxFullModuleName;
            antTask "delete" ["dir":tDir] [] p;
            antTask "mkdir" ["dir":tDir] [] p;

            antTask "copy" ["todir":tDir] 
                           [antFilesetElement 
                                (config.vertxModsDir
                                ^config.vertxModuleName) []] p;

            antTask "zip" ["destfile":config.dir.target
                                ^config.vertxFullModuleName]
                          [antFilesetElement config.vertxModsDir 
                            [Include (config.vertxModuleName^"/**")]] p;
        done;

    
    vertxRun = 
        target config "vertx" "run" 
            [Description "runs the current vertx module or the one
            given as paremeter"]
        do p:
            mn = if empty? p.args then
                config.vertxModuleName
            else
                head p.args
            fi;
            vertxTask config ["runmod", mn] p;
        done;

    vertxTest = 
        target config "vertx" "test"
            [Before config.livecycleTargets.test,
             Description "runs the vertx test module, 
                or the one given as name"]
        do p:
            mn = if empty? p.args then
                config.vertxTestModuleName
            else
                head p.args
            fi;
            vertxTask config ["runmod", mn] p;
        done;

    vertxRunVerticle = 
        target config "vertx" "runVerticle"
            [Description "runs the current verx verticle"]
        do p:
            vn = if empty? p.args then
                "server.yeti"
            else
                head p.args
            fi;
            dir = if length p.args < 2 then
                "."
            else
                head (tail p.args)
            fi;
            cp = dir ^ ":" ^ (strJoin ":" (vertxRunPath config));
            vertxTask config ["run", vn, "-cp", cp] p
        done;
    {
        vertxTargets = {
            vertxCompile,
            vertxZipModule,
            vertxRun,
            vertxTest,
            vertxRunVerticle,
        }
    });
{
    createVertxConfig,
    registerVertxTargets,
    vertxHelpers = {
        vertxTask,
        vertxRunPath,
        vertxTestPath,
    }
}
