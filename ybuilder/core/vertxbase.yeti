/*
 * Copyright 2012 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

module ybuilder.core.vertxbase;

import java.lang.System;

load ybuilder.core.build;
bu = load ybuilder.core.build;

createVertxConfig config = 
    {
        var vertxModsDir = "mods/",
        var vertxConfDir = "mods/conf/",
        var vertxModuleName = "main",
        var vertxSysProps = ["org.vertx.yeti":"yeb.vertx.YetiVerticleFactory"],
        var vertxTestModuleName = "test",
        var vertxFullModuleName = 
            "\(config.groupId).\(config.artifactId)-v\(config.version)", 
    };

vertxTask config args p = 
   (sysProps = copy config.vertxSysProps; 
    cpP = array [PathPatterns \(config.pathScopeProvided is pathPatternType)];

    //config for vertx
    if (file config.vertxConfDir)#exists() then
        push cpP (Location config.vertxConfDir);
    fi;
   

    /* Language support is now in submodules do not put here
    jythonHome =System#getenv("JYTHON_HOME");  
    jrubyHome =System#getenv("JRUBY_HOME");  
    if defined? jythonHome then
        push cpP (Location (jythonHome^"/jython.jar"));
        sysProps["jython.home"] := jythonHome;
    fi;
    if defined? jrubyHome then
        push cpP (Location (jrubyHome^"/lib/jruby.jar"));
        sysProps["jruby.home"] := jrubyHome;
    fi;
    */

    logInfo p "vertx" "running vertx \(strJoin " " args)";
    if "verbose" in p.properties then
        logInfo p "vertx" "System-Properties: \(sysProps)";
        logInfo p "vertx" "classpath: \(listPath cpP)";
        logInfo p "vertx" ("configDir: \(config.vertxConfDir) exists: "
               ^ "\((file config.vertxConfDir)#exists())");                      
    fi;

    antTask "java" ["classname":"org.vertx.java.platform.impl.cli.Starter",
                   "fork":"true",
                   "failonerror":"true",
                   "taskname":"vertx"]
                   ([el "classpath" [:] (antPathElements (cpP))]
                    ++ (map do a: el "arg" ["value":a] [] done args)
                    ++ (mapHash do k v:
                            el "sysproperty" ["key" : k, "value":v] []
                        done sysProps)) 
                    p);

vertxRunPath config = 
    listPath ([PathPatterns \config.pathScopeCompile,
                 Location (config.dir.targetClasses)]);

vertxTestPath config =
    listPath ([PathPatterns \config.pathScopeCompile, 
                 PathPatterns \config.pathScopeTest,
                 Location (config.dir.targetClasses),
                 Location (config.dir.targetTestClasses)]);
    



//fn to copy module libs to module dir
moduleLibsFn config p=
    (targetDir = config.vertxModsDir^config.vertxModuleName^"/lib/";
    antTask "delete" ["dir":targetDir] [] p;
    antTask "mkdir" ["dir":targetDir] [] p;
    antTask "copy" ["todir":targetDir]
        [antFilesetElement (config.dir.libManaged^"compile/") 
                            [Include  "*.jar"]] p;
    antTask "copy" ["todir":targetDir, 
                    "flatten":"true"]
                   [antFilesetElement config.dir.lib [Include "**/*.jar"]] p);

registerVertxTargets config =
    (//add fn to retrieveDependencies target
    bu.doAfterTarget 
        config.projectBaseTargets.retrieveLibs 
        (moduleLibsFn config);

    vertxCompile = 
        target config "vertx" "compile" 
            [Depends config.livecycleTargets.compile,
             Depends config.projectBaseTargets.jarOnly,
             Before config.livecycleTargets.testCompile,
             Description 
                "Makes jar or classes in src  copies it to vertx module"]
        do p:
            targetDir = config.vertxModsDir^config.vertxModuleName^"/";
            antTask "mkdir" ["dir":targetDir] [] p;
            if (file (config.dir.target ^config.artifactId^".jar"))
                    #exists() then
                antTask "copy" ["todir":targetDir^"lib",
                            "overwrite":"true"]
                    [antFilesetElement config.dir.target 
                        [Include "\(config.artifactId).jar"]] p;
            fi;
        done;    

    vertxZipModule = 
        target config "vertx" "zipModule"
            [Depends config.livecycleTargets.preparePackage,
             Description "bundles creates the vertx module and 
                              copies it to target"]
        do p:
            tDir = config.dir.target
                    ^config.vertxModsDir
                    ^config.vertxFullModuleName;
            antTask "delete" ["dir":tDir] [] p;
            antTask "mkdir" ["dir":tDir] [] p;

            antTask "copy" ["todir":tDir] 
                           [antFilesetElement 
                                (config.vertxModsDir
                                ^config.vertxModuleName) []] p;

            antTask "zip" ["destfile":config.dir.target
                                ^config.vertxFullModuleName]
                          [antFilesetElement config.vertxModsDir 
                            [Include (config.vertxModuleName^"/**")]] p;
        done;

    
    vertxMain = 
        target config "vertx" "main" 
            [Description "runs the current main vertx module or the one
            given as paremeter"]
        do p:
            mn = if empty? p.args then
                config.vertxModuleName
            else
                head p.args
            fi;
            vertxTask config ["runmod", mn] p;
        done;

    vertxCmd =
        target config "vertx" "cmd"
            [Description "runs vertx with the given parameters"]
        do p:
            vertxTask config p.args p;
        done;

    vertxTest = 
        target config "vertx" "test"
            [Before config.livecycleTargets.test,
             Description "runs the vertx test module, 
                or the one given as name"]
        do p:
            mn = if empty? p.args then
                config.vertxTestModuleName
            else
                head p.args
            fi;
            vertxTask config ["runmod", mn] p;
        done;

    {
        vertxTargets = {
            vertxCompile,
            vertxZipModule,
            vertxMain,
            vertxCmd,
            vertxTest,
        }
    });
{
    createVertxConfig,
    registerVertxTargets,
    vertxHelpers = {
        vertxTask,
        vertxRunPath,
        vertxTestPath,
    }
}
