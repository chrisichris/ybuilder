module ybuilder.core.yetibase;

import java.io.File;

load ybuilder.core.base;
load ybuilder.core.build;
load ybuilder.core.javabase;

yetiDirP = path mainDirP "yeti";
yetiTestDirP = path testDirP "yeti";
yetidocDirP = path docDirP "yetidoc";

yeticAttributes = ["srcdir":yetiDirP~, "destdir": targetClassesDirP~];
yeticTestAttributes = ["srcdir":yetiTestDirP~, "destdir" : targetTestClassesDirP~];

createNewYetiProject projectDir project = (
		for [libDirP, javaDirP,yetiDirP,resourcesDirP,javaTestDirP,yetiTestDirP,resourcesTestDirP, path basedir buildExtlibDir] 
			do d: antTask "mkdir" ["dir":(joinPath projectDir d)~] [] project done;
		antTask "copy" ["todir":(joinPath projectDir ybuilderDirP)~, "overwrite":"false"] [
			el "javaresource" ["name":"ybuilder/core/buildDependencies.yeti"][],
			el "mapper" ["type":"flatten"] []] project;
		antTask "copy" ["todir":projectDir~, "overwrite":"false"] [
			el "javaresource" ["name":"ybuilder/core/project.yeti"] [],
			el "mapper" ["type":"flatten"] []] project;
	);
	
yetiMainTask args project = 
	antTask "java" ["classname":"yeti.lang.compiler.yeti", "classpathref":"testPath", "fork":"true"] 
		(map do a: el "arg" ["value":a] [] done args) project;
	
	

{
	yetiMainTask,
	yetiDirP, yetiTestDirP, yetidocDirP,
	yeticAttributes, yeticTestAttributes,

	createNewYetiProject,
	
	defineYetic = target "defineYetic" [Depends initPathes, InLivecycle initialize]
		(antTask "taskdef" ["name":"yetic", "classname":"yeti.lang.compiler.YetiTask", "classpathref":"compilePath"] []),	

	compileYeti = target "compileYeti" [Depends compileJava, InLivecycle compile] 
		(antTask "yetic" yeticAttributes [
			el "classpath" [:] [
				el "pathelement" ["path":"compilePath"] []]]),
				 
	testCompileYeti = target "testCompileYeti" [Depends testCompileJava, InLivecycle testCompile] 
		(antTask "yetic" yeticTestAttributes [
			el "classpath" [:] [
				el "pathelement" ["path":"testPath"] []]]),
	yetidoc = target "yetidoc" [InLivecycle doc, Depends initPathes, Description "creates yetidoc"] do p:
		antTask "delete" ["dir":yetidocDirP~] [] p;
		antTask "mkdir" ["dir":yetidocDirP~] [] p;
		fileSet = createAntFileSet [Include (yetiDirP||"**/*.yeti"), Exclude "**/ybuilder.yeti" ];
		fs = map (strReplace File#pathSeparator "/" . string) (array fileSet#getDirectoryScanner()#getIncludedFiles());
		args = ["-doc", yetidocDirP~] ++ fs;
		yetiMainTask args p;
		done;
}

